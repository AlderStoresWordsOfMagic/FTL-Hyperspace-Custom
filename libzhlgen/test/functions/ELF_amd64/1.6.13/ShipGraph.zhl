"41554c63ea41544989fc5589cd5389f34883ec28":
cleanup Point ShipGraph::GetSlotRenderPosition(ShipGraph *this<rdi>, int slotId<rsi>, int roomId<rdx>, bool intruder<rcx>);
".488b4f30488b573831c04829ca48c1fa02":
cleanup int ShipGraph::DoorCount(ShipGraph *this<rdi>, int roomId<rsi>);
".415741564189d641554589c541544189cc5589f5534889fb4883ec68":
cleanup Door* ShipGraph::ConnectingDoor(ShipGraph *this<rdi>, int x1<rsi>, int y1<rdx>, int x2<rcx>, int y2<r8>);
".41574189cf41564589c641b82300000041554531ed41544989fcbf23000000":
cleanup int ShipGraph::ConnectedGridSquares(ShipGraph *this<rdi>, int x1<rsi>, int y1<rdx>, int x2<rcx>, int y2<r8>);
"!.4889d14889f24989c8":
cleanup int ShipGraph::ConnectedGridSquaresPoint(ShipGraph *this<rdi>, Point p1<rsi>, Point p2<rdx>);
"!.4889d14889f24989c8":
cleanup Door* ShipGraph::ConnectingDoor(ShipGraph *this<rdi>, Point p1<rsi>, Point p2<rdx>);
".488b074863f6488b04f0":
cleanup int ShipGraph::GetNumSlots(ShipGraph *this<rdi>, int room<rsi>);
".554889f5534883ec08":
cleanup int ShipGraph::PopClosestDoor(ShipGraph *this<rdi>, std::vector<int>& doors<rsi>, std::vector<float>& distances<rdx>);
".f30f584758":
cleanup float ShipGraph::ConvertToWorldAngle(ShipGraph *this<rdi>, float ang<xmm0>);
".f30f5c4758":
cleanup float ShipGraph::ConvertToLocalAngle(ShipGraph *this<rdi>, float ang<xmm0>);
".534889fb4883ec20f30f2a7f48":
cleanup Pointf ShipGraph::ConvertToWorldPosition(ShipGraph *this<rdi>, Pointf local<xmm0>);
".4883ec184084f6660fd60424":
cleanup Pointf ShipGraph::ConvertToLocalPosition(ShipGraph *this<rdi>, Pointf world<xmm0>, bool past<rsi>);
".41574989ff41564155415455534883ec18":
cleanup void ShipGraph::ComputeCenter(ShipGraph *this<rdi>);
".8b4f6831c039f1":
cleanup bool ShipGraph::ContainsPoint(ShipGraph *this<rdi>, int x<rsi>, int y<rdx>);
".41574531c04989ff41564531f6415541544189f45589d5530fb6d94883ec08":
cleanup int ShipGraph::GetSelectedRoom(ShipGraph *this<rdi>, int x<rsi>, int y<rdx>, bool unk<rcx>);
".488b4708482b0748c1f803":
cleanup int ShipGraph::RoomCount(ShipGraph *this<rdi>);
".4883ec184c8b0e4c8b46084889f84d29c849c1f8034d85c0":
cleanup Globals::Rect ShipGraph::GetRoomShape(ShipGraph *this<rdi>, int room<rsi>);
"."85f60f57c0:
cleanup float ShipGraph::GetRoomOxygen(ShipGraph *this<rdi>, int room<rsi>);
".85f6b801000000":
cleanup bool ShipGraph::GetRoomBlackedOut(ShipGraph *this<rdi>, int room<rsi>);
".41564531c04989f6415541544189d4554889fd53":
cleanup std::vector<Door*> ShipGraph::GetDoors<rdi>(ShipGraph *this<rsi>, int roomId<rdx>);
".41564155415441bc010000005589d55389f34883ec20":
cleanup bool ShipGraph::IsRoomConnected(ShipGraph *this<rdi>, int room1<rsi>, int room2<rdx>);
".5389fb4881ec90000000":
static cleanup ShipGraph* ShipGraph::GetShipInfo(int shipId<rdi>);
".41574989f741564155415455534889d348c1eb204881ecc8000000":
cleanup Path ShipGraph::Dijkstra<rdi>(ShipGraph *this<rsi>, Point start<rdx>, Point goal<rcx>, int shipId<r8>);
".415741564989f641554154554889d548c1ed20534889fb4883ec58":
cleanup Path ShipGraph::FindPath<rdi>(ShipGraph *this<rsi>, Point p1<rdx>, Point p2<rcx>, int shipId<r8>);
".41574889f04531ff48c1e820415641554189f54154440fb6e1554889fd534889c34881eca8000000":
cleanup Slot ShipGraph::GetClosestSlot(ShipGraph *this<rdi>, Point pos<rsi>, int shipId<rdx>, bool intruder<rcx>);


struct ShipGraph depends (Point, Pointf, Room) 
{{
    // TODO: This looks like it was re-implemented because they were unsure at the time how to hook it, we can totally hook it now like we do for GetSlotRenderPosition
	static Point TranslateFromGrid(int xx, int yy)
	{
		return Point(xx * 35, yy * 35);
	}
	
	// TODO: This looks like it was re-implemented because they were unsure at the time how to hook it, we can totally hook it now like we do for GetSlotRenderPosition
	static Point TranslateToGrid(int xx, int yy)
	{
		return Point(xx / 35, yy / 35);
	}
	
	// TODO: This looks like it was re-implemented because they were unsure at the time how to hook it, we can totally hook it now like we do for GetSlotRenderPosition
	Point GetIntoRoom(int roomId, Point pos)
	{
		Point ret;
		if (roomId >= 0 && roomId < this->rooms.size())
		{
			auto room = this->rooms[roomId];
			ret = room->GetIntoRoom(pos);
		}
		else
		{
			ret = Point(-1, -1);
		}
		
		return ret;
	}
	
	// TODO: This looks like it was re-implemented because they were unsure at the time how to hook it, we can totally hook it now like we do for GetSlotRenderPosition
	Pointf GetRoomCenter(int roomId) 
	{
		auto rooms = this->rooms;
		float xx = -1;
		float yy = -1;
		
		for (auto const& x: rooms)
		{
			if (roomId == x->iRoomId)
			{
				auto rect = x->GetRect();
				
				xx = rect.x + rect.w / 2;
				yy = rect.y + rect.h / 2;
				break;
			}
		}
		
		return Pointf(xx, yy);
	}
	
	// TODO: This looks like it was re-implemented because they were unsure at the time how to hook it, we can totally hook it now like we do for GetSlotRenderPosition
	Point GetSlotWorldPosition(int roomId, int slotId)
	{
		Globals::Rect rect = rooms[roomId]->rect;
		return Point(rect.x + 35 * (slotId % (rect.w / 35)) + 17, rect.y + 35 * (slotId / (rect.h / 35)) + 17);
	}
	
}};
