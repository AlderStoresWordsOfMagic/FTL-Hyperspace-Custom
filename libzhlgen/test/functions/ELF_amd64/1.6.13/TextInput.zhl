"!41544189d45589f54889ce534889fb":
cleanup void TextInput::constructor(TextInput *this<rdi>, int maxChars<rsi>, TextInput::AllowedCharType allowedCharType<rdx>, const std::string& prompt<rcx>);
".4156b9ffffffff41554189f54889fe41544989d431d255534889fb4883ec70":
cleanup void TextInput::OnRender(TextInput *this<rdi>, int font<rsi>, Point pos<rdx>);
".!538b473839473c":
cleanup void TextInput::OnLoop(TextInput *this<rdi>);
".53807f40004889fb":
cleanup void TextInput::OnTextEvent(TextInput *this<rdi>, CEvent::TextEvent event<rsi>);
".!0fb64740c3":
cleanup bool TextInput::GetActive(TextInput *this<rdi>);
".53b9ffffffff4889fb31d2":
cleanup std::string TextInput::GetText<rdi>(TextInput *this<rsi>);
".534883ec30488b4710482b4708":
cleanup void TextInput::Start(TextInput *this<rdi>);
".!c6474000":
cleanup void TextInput::Stop(TextInput *this<rdi>);
".55488d6f08534889fb4883ec28":
cleanup int TextInput::SetText(TextInput *this<rdi>, const std::string& text<rsi>);
".41564155415455534889fb4883ec30807f4000":
cleanup void TextInput::OnTextInput(TextInput *this<rdi>, int asciiChar<rsi>);


struct TextInput depends (CEvent)
{{
	enum AllowedCharType
	{
	  ALLOW_ASCII = 0x0,
	  ALLOW_LANGUAGE = 0x1,
	  ALLOW_ANY = 0x2,
	};
	
	TextInput()
	{
	}

	TextInput(int maxChars, TextInput::AllowedCharType allowedCharType, const std::string& prompt)
	{
		this->constructor(maxChars, allowedCharType, prompt);
	};
}};
