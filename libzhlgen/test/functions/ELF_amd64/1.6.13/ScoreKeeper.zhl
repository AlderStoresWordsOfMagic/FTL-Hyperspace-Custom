"4157415641554c8daf8000000041544c8da78001000055488dafa000000053488d9f900000004883ec48":
cleanup void ScoreKeeper::constructor(ScoreKeeper *this<rdi>);
".4157415641554531ed41544989f45553":
cleanup std::pair<int, int> ScoreKeeper::GetShipId_DO_NOT_USE_DIRECTLY(ScoreKeeper *this<rdi>, const std::string& blueprintName<rsi>);
".4863d2534889fb":
cleanup std::string ScoreKeeper::GetShipBlueprint<rdi>(ScoreKeeper *this<rsi>, int index<rdx>);
"!.41544989fc5589f5":
cleanup void ScoreKeeper::SaveGame(ScoreKeeper *this<rdi>, int fd<rsi>);
".41544989fc89f75589f5534883ec20":
cleanup void ScoreKeeper::LoadGame(ScoreKeeper *this<rdi>, int fd<rsi>);
".83fa02760b31c0":
cleanup bool ScoreKeeper::GetShipUnlocked(ScoreKeeper *this<rdi>, int shipId<rsi>, int shipVariant<rdx>);
".4084f64088b798010000":
cleanup void ScoreKeeper::SetVictory(ScoreKeeper *this<rdi>, bool victory<rsi>);
".5589f5534889fb":
cleanup void ScoreKeeper::AddScrapCollected(ScoreKeeper *this<rdi>, int scrap<rsi>);
".415741564989d6415549bdabaaaaaaaaaaaaaa415455534883ec48":
cleanup void ScoreKeeper::SaveScores(ScoreKeeper *this<rdi>, int file<rsi>, std::vector<TopScore>& topScores<rdx>);
".415448b8abaaaaaaaaaaaaaa4989f4554889d5534883ec50":
cleanup int ScoreKeeper::AddTopScoreList(ScoreKeeper *this<rdi>, TopScore& score<rsi>, std::vector<TopScore>& topScoreList<rdx>);
".4157488d46084189d7baffffffff41564989fe":
cleanup void ScoreKeeper::AddTopScoreType(ScoreKeeper *this<rdi>, TopScore& topScore<rsi>, int type<rdx>);
".4156415541545589f5534889fb":
cleanup void ScoreKeeper::Save(ScoreKeeper *this<rdi>, bool newHighScore<rsi>);
".415741564531f641554531ed41544989fc":
cleanup void ScoreKeeper::WipeProfile(ScoreKeeper *this<rdi>, bool permanent<rsi>);
".415741564189ce41554189d541544589c4554889fd5389f34883ec28":
cleanup void ScoreKeeper::UnlockShip(ScoreKeeper *this<rdi>, int shipType<rsi>, int shipVariant<rdx>, bool save<rcx>, bool hidePopup<r8>);
".41574889f8415641554189d54154555389f34881ec98000000":
cleanup void ScoreKeeper::LoadVersionFour(ScoreKeeper *this<rdi>, int file<rsi>, int version<rdx>);
".415631f64155415455534889fb488dab880500004c8da3a80b00004883ec70":
cleanup void ScoreKeeper::OnInit(ScoreKeeper *this<rdi>);
".4157415641554989f5415455534881ec68020000":
cleanup void ScoreKeeper::RenderTopScores(ScoreKeeper *this<rdi>, const std::vector<TopScore>& topScoreList<rsi>, Point position<rdx>, int newHighScore<rcx>);
".4155ba01000000415455534889fb4c8da3880700004883ec18":
cleanup void ScoreKeeper::CheckTypes(ScoreKeeper *this<rdi>);
".41545589f5534889fb4883ec40":
cleanup void ScoreKeeper::SetupTopShip(ScoreKeeper *this<rdi>, int variant<rsi>);
"!.55bd09000000534889fb4883ec08":
cleanup void ScoreKeeper::CycleLeft(ScoreKeeper *this<rdi>);
"!.5531ed534889fb4883ec08":
cleanup void ScoreKeeper::CycleRight(ScoreKeeper *this<rdi>);
".55534889fb4883ec0880bf280c000000":
cleanup void ScoreKeeper::MouseClick(ScoreKeeper *this<rdi>, int x<rsi>, int y<rdx>);
".5589f5534889fb4883ec18":
cleanup bool ScoreKeeper::KeyDown(ScoreKeeper *this<rdi>, SDLKey key<rsi>);
".4157ba0d000000":
cleanup void ScoreKeeper::Open(ScoreKeeper *this<rdi>, bool fromGameOver<rsi>);
".4157415641554189f5415455534889fb4881ec28020000":
cleanup void ScoreKeeper::OnRender(ScoreKeeper *this<rdi>, bool lastPlaythrough<rsi>);

"!488b3b488b07ff5028488b7b08488b07ff502831f6bf(???????\?)":
ScoreKeeper* Global_ScoreKeeper_Keeper;


struct ScoreKeeper
{{
	std::pair<int, int> GetShipId(const std::string& blueprintName)
	{
		// TODO: Maybe this should be a hook?
		int variant = 0;
		
		if (blueprintName.find("_2") != std::string::npos)
		{
			variant = 1;
		}
		if (blueprintName.find("_3") != std::string::npos)
		{
			variant = 2;
		}
		
		std::pair<int, int> typePair = GetShipId_DO_NOT_USE_DIRECTLY(blueprintName);
		
		return std::pair<int, int>(typePair.first, variant);
	}
}};
