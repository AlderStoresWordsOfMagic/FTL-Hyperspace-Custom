"415541544989d455488daec80100004889d6534889fb4889ef4883ec18":
cleanup std::string EventGenerator::GetImageFromList<rdi>(EventGenerator *this<rsi>, const std::string& listName<rdx>);
".41574189cf41564989f641554989fd415455498d6e48534889d34883ec58":
cleanup SectorDescription EventGenerator::GetSectorDescription<rdi>(EventGenerator *this<rsi>, const std::string& type<rdx>, int level<rcx>);
".4157415641554c8d6e1841544989d4554889f5534889fb4881ecd8000000":
cleanup SectorDescription EventGenerator::GetSpecificSector<rdi>(EventGenerator *this<rsi>, const std::string& name<rdx>);
".415741564155415455488d6f78534889f34881ec88020000":
cleanup LocationEvent *EventGenerator::CreateEvent(EventGenerator *this<rdi>, const std::string& name<rsi>, int worldLevel<rdx>, bool ignoreUnique<rcx>);
".5589cd534889fb4883ec184183f8ff":
cleanup LocationEvent *EventGenerator::GetBaseEvent(EventGenerator *this<rdi>, const std::string& name<rsi>, int worldLevel<rdx>, char ignoreUnique<rcx>, int seed<r8>);

"!":
EventGenerator* Global_EventGenerator_Generator;


struct EventGenerator depends (SectorDescription, Sector, LocationEvent)
{{
    SectorDescription GetSectorDescriptionCustom(const std::string& type, int level);

	void ClearUsedEvent(const std::string& name)
	{
		auto it = usedEvents.find(name);
		if (it != usedEvents.end())
		{
			events[name] = it->second;
			usedEvents.erase(it);
		}
	}
	
	void ClearUsedEvent(LocationEvent *locEvent)
	{
		if (locEvent)
		{
			ClearUsedEvent(locEvent->eventName);
			for (auto& choice : locEvent->choices)
			{
				ClearUsedEvent(choice.event);
			}
		}
	}
}};
