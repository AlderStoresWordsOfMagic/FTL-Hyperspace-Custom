"534889fb488b3f31f6e8????????85c07406":
static cleanup void FileHelper::deleteFile(const std::string& fileName<rdi>);
".534889fb4883ec20":
static cleanup std::string FileHelper::getResourceFile<rdi>();
".534889fb4883ec10":
static cleanup std::string FileHelper::getUserFolder<rdi>();
".534889fb4883ec20":
static cleanup std::string FileHelper::getSaveFile<rdi>();
".4883ec28c605????????01":
static cleanup void FileHelper::initFileHelper();
".4883ec08488b3f31f6":
static cleanup bool FileHelper::fileExists(const std::string& fileName<rdi>);
"!.488b36488b3f":
static cleanup void FileHelper::renameFile(const std::string& fileName<rdi>, const std::string& newName<rsi>);
".534889fb488b3f31f6":
static cleanup int FileHelper::createBinaryFile(const std::string& fileName<rdi>);
".4155bf????????415455534883ec28":
static cleanup bool FileHelper::saveFileExists();
".4155bf????????415455534883ec28":
static cleanup int FileHelper::readSaveFile();
".4155bf????????415455534883ec28":
static cleanup int FileHelper::readStatsFile();
".488b05????????488905":
static cleanup int FileHelper::createSaveFile();
".488b05????????488905":
static cleanup int FileHelper::createStatsFile();
"!.53bf????????e8":
static cleanup void FileHelper::deleteSaveFile();
".534883ec20e8":
static cleanup void FileHelper::deleteAllSaveFiles();
"!.8b05????????c3":
static cleanup int FileHelper::getPosition(int file<rdi>);
".53488b3f31f631c0":
static cleanup int FileHelper::readBinaryFile(const std::string& fileName<rdi>);
".415741564155415455534883ec18":
static cleanup bool FileHelper::writeFloat(int file<rdi>, float data<xmm0>);
".415789f141564155415455534883ec18":
static cleanup bool FileHelper::writeInt(int file<rdi>, int data<rsi>);
".41574156415541544989f455534863da4883ec18":
static cleanup bool FileHelper::writeData(int file<rdi>, void* data<rsi>, int len<rdx>);
".41574156415541545589fd534883ec28":
static cleanup bool FileHelper::writeString(int file<rdi>, const std::string& data<rsi>);
".81fffffeff7f53":
static cleanup void FileHelper::closeBinaryFile(int file<rdi>);
".4157415641554989fd4154555389f34883ec28":
static cleanup std::string FileHelper::readString<rdi>(int file<rsi>);
".41554154555389fb4883ec18":
static cleanup float FileHelper::readFloat(int file<rdi>);
".41554154555389fb4883ec18":
static cleanup int FileHelper::readInteger(int file<rdi>);
".4883ec0831d2":
static cleanup bool FileHelper::seekPosition(int file<rdi>, int pos<rsi>);
".4157415641554189d541545589fd0fb6fa534863de01df4883ec08":
static cleanup char* FileHelper::readBuffer(int file<rdi>, int len<rsi>, bool nullTerminate<rdx>);
".41554889f141545589d55389fb4883ec08":
static cleanup void FileHelper::readData(int file<rdi>, void* data<rsi>, int len<rdx>);


struct FileHelper
{{
	static int fileLength(int fd)
	{
        FILE* fp = fdopen(dup(fd), "r"); // Duplicate file descriptor & then open the stream so that we can fclose correctly later on
        rewind(fp); // TODO: Not sure if we have to rewind before but could it hurt?
        fseek(fp, 0, SEEK_END);
        int lengthOfFile = ftell(fp);
        rewind(fp); // Rewind since the file index is shared and lets not screw with other people using the file descriptor that was opened by `open` in FTL's code
        fclose(fp);
        return lengthOfFile;
	}
}};
