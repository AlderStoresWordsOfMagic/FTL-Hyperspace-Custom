"534889fb4883ec10488b471048c707????????488d78e84881ff????????750e":
cleanup void CachedImage::destructor(CachedImage *this<rdi>);
"55534889fbbf????????4883ec08e8????????483b4318":
cleanup void CachedImage::SetImagePath(CachedImage *this<rdi>, const std::string& imagePath<rsi>);
".41544189d45589f553397720":
cleanup void CachedImage::SetPosition(CachedImage *this<rdi>, int x<rsi>, int y<rdx>);
"41544189cc5589d5534889fb48c7470800000000":
cleanup void CachedImage::constructor1(CachedImage *this<rdi>, const std::string& path<rsi>, int x<rdx>, int y<rcx>);
"554889f5488d7610534889fb488d7f104883ec0848c747f800000000":
cleanup void CachedImage::constructor_copy(CachedImage *this<rdi>, const CachedImage &other<rsi>);
"534889fb4883ec100f2e4740":
cleanup void CachedImage::SetRotation(CachedImage *this<rdi>, float _rotation<xmm0>);
".5589f5534889fb4883ec0840387744":
cleanup void CachedImage::SetMirrored(CachedImage *this<rdi>, bool _mirrored<rsi>);
"415455534889fb4883ec50488b6f184885ed":
cleanup void CachedImage::CreatePrimitive(CachedImage *this<rdi>);


struct CachedImage
{{
	enum Centered
	{
	  CENTERED = 0x0,
	};
	
	CachedImage(const std::string& path, int x, int y)
	{
		constructor1(path, x, y);
	}
	
	CachedImage()
	{
		
	}
	
	CachedImage(const CachedImage &other)
	{
		constructor_copy(other);
	}
	
	CachedImage& operator=(CachedImage &other)
	{
		constructor_copy(other);
		return *this;
	}
}};

