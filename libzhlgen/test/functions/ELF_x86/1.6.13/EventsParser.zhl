"5557565383ec4c8d5c243c8d7c2420895c24088d6c2430":
cleanup RandomAmount* EventsParser::PullMinMax(EventsParser *this, rapidxml::xml_node<char>* node, const std::string& name);
"55ba????????89e557565381ec3c0100008b4510":
static cleanup void EventsParser::ProcessEvent(std::string& strRef, EventsParser *eventsParser, rapidxml::xml_node<char>* node, const std::string& eventName);
"5589e557565381ec5c0200008d8508feffff89442408":
static cleanup void EventsParser::ProcessShipEvent(ShipTemplate& shipEvent, EventsParser *eventsParser, rapidxml::xml_node<char> *node);
"5589e557565383ec5c8b45188d7de48b5d10":
cleanup ResourcesTemplate* EventsParser::ProcessModifyItem(EventsParser *this, ResourcesTemplate& resources, rapidxml::xml_node<char> *node, const std::string& unk);
"5557565383ec3c8d5c241c8d6c241ac744240800000000":
cleanup void EventsParser::AddAllEvents(EventsParser *this);
"5589e557565381ecac0001008b45088b7510":
cleanup void EventsParser::AddEvents(EventsParser *this, EventGenerator& generator, char* file, const std::string& fileName);
"55ba????????89e557565383ec2c8b4508c70000000000c7400400000000c74008000000008b451083c018e8????????85c089c60f84????????8db6000000008b4514":
static cleanup void EventsParser::ProcessEventList(std::vector<std::string>& vecRef, EventsParser *eventsParser, rapidxml::xml_node<char>* node, const std::string& listName);


struct EventsParser
{{
	static bool ParseBoolean(const std::string& str)
	{
		return str == "true" || str == "TRUE" || str == "True";
	}
}};
