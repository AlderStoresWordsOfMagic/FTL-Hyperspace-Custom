"5731c08d7c240883e4f0ff77fc5589e557565381ec????????8b5f048b37":
bool ScoreKeeper::GetShipUnlocked(ScoreKeeper *this<ecx>, int shipId, int shipVariant);
"578d7c240883e4f0ff77fc5589e557565389ce83ec2c8b4704":
std::string ScoreKeeper::GetShipBlueprint<ecx>(ScoreKeeper *this, int index);
"578d7c240883e4f0ff77fc5589e557565389cb8d75cc8d7dd481ec????????c70424????????e8????????8d45bc":
void ScoreKeeper::OnInit(ScoreKeeper *this<ecx>);
"578d7c240883e4f0ff77fc5589e557565389cbb9????????81ec????????8b37e8????????84c00f85????????8b15????????f30f1005????????":
void ScoreKeeper::Save(ScoreKeeper *this<ecx>, bool newHighScore);
"578d7c240883e4f0ff77fc5589f889e557565389cf81ec????????80b9c40b0000008b00898528fdffff888530fdffff0f85????????0f2805????????b9????????8db5c0feffff":
void ScoreKeeper::OnRender(ScoreKeeper *this<ecx>, bool lastPlaythrough);
"5789c88d7c240883e4f0ff77fc5589e557565383ec5c8b57048b1f8955c48b570885db8b7f0c8955bc":
void ScoreKeeper::UnlockShip(ScoreKeeper *this<ecx>, int shipType, int shipVariant, bool save, bool hidePopup);
"8b44240484c088818802000074??83814802000001c20400":
void ScoreKeeper::SetVictory(ScoreKeeper *this<ecx>, bool victory);
"5789c883c0148d7c240883e4f0ff77fc5589e557565389cf83ec5c89410c89c883c03c894db0c701????????":
void ScoreKeeper::constructor(ScoreKeeper *this<ecx>);
".578d7c240883e4f0ff77fc5589e5575653":
int ScoreKeeper::GetShipIdType(ScoreKeeper *this<ecx>, const std::string& blueprintName);
"578d7c240883e4f0ff77fc5589f889e557565381ec????????8b4004898d28ffffff8b3f83f808898530ffffff898124130000":
void ScoreKeeper::LoadVersionFour(ScoreKeeper *this<ecx>, int file, int version);
"578d7c240883e4f0ff77fc5589e557565383ec3c8b07894ddcb9????????8945d4e8????????c745e000000000c745e4000000008b4ddc8b75e4":
void ScoreKeeper::WipeProfile(ScoreKeeper *this<ecx>, bool permanent);
"578d7c240883e4f0ff77fc5589e557565389cb83ec1c80b9c40b0000000f85????????0fb6812c06000084c0":
void ScoreKeeper::MouseClick(ScoreKeeper *this<ecx>, int x, int y);
"578d7c240883e4f0ff77fc5589e55756538d55d889cb83ec5c8b078955d08945b08b81dc0200008981e00200008b81800b0000":
void ScoreKeeper::SetupTopShip(ScoreKeeper *this<ecx>, int variant);
"578d7c240883e4f0ff77fc5589e557565389cb8db3cc07000083ec3cc7442404010000008b81800b0000890424":
void ScoreKeeper::CheckTypes(ScoreKeeper *this<ecx>);
"578d7c240883e4f0ff77fc5589e557565389ceb9????????81ec????????8b47048b1f8d7da8c7442404ffffffff":
void ScoreKeeper::AddTopScoreType(ScoreKeeper *this<ecx>, TopScore& topScore, int type);
"578d7c240883e4f0ff77fc5589e557565383ec7c8b77048b078b5e0489c28945948b0689d929c1":
int ScoreKeeper::AddTopScoreList(ScoreKeeper *this<ecx>, TopScore& score, std::vector<TopScore>& topScoreList);
"578d7c240883e4f0ff77fc5589e557565381ec????????8b5f048b078b5708899de4faffff8b5f0c8985f8faffff899dd4faffff":
void ScoreKeeper::RenderTopScores(ScoreKeeper *this<ecx>, const std::vector<TopScore>& topScoreList, Point position, int newHighScore);
"578d7c240883e4f0ff77fc5589e557565389cebb????????83ec1c908d7426008b96800b000089f185d2":
void ScoreKeeper::CycleLeft(ScoreKeeper *this<ecx>);
"578d7c240883e4f0ff77fc5589e557565389ce31db83ec1c908db426000000008b96800b000089f183fa09":
void ScoreKeeper::CycleRight(ScoreKeeper *this<ecx>);
".578d7c240883e4f0ff77fc5589e557565389ce83c10c":
void ScoreKeeper::Open(ScoreKeeper *this<ecx>, bool fromGameOver);
"578d7c240883e4f0ff77fc5589e557565389cb83ec2c0fb681c40b00008b3784c0":
bool ScoreKeeper::KeyDown(ScoreKeeper *this<ecx>, SDLKey key);
"578d7c240883e4f0ff77fc5589e557565389cbb9????????83ec3c8b37e8????????84c0":
void ScoreKeeper::AddScrapCollected(ScoreKeeper *this<ecx>, int scrap);
"578d7c240883e4f0ff77fc5589f889e557565383ec7c8b40048b3f8b1889458c":
void ScoreKeeper::SaveScores(ScoreKeeper *this<ecx>, int file, std::vector<TopScore>& topScores);
"578d7c240883e4f0ff77fc5589e557565389ce83ec2c8b1fa1????????8d7e0889442404891c24":
void ScoreKeeper::SaveGame(ScoreKeeper *this<ecx>, int fd);
"578d7c240883e4f0ff77fc5589e557565383ec4c8b3f894dc4893c24":
void ScoreKeeper::LoadGame(ScoreKeeper *this<ecx>, int fd);

"!8b430cb9(???????\?)c6804412000000c7042401000000":
ScoreKeeper* Global_ScoreKeeper_Keeper;


struct ScoreKeeper
{{
	std::pair<int, int> GetShipId(const std::string& blueprintName)
	{
		int variant = 0;
		
		if (blueprintName.find("_2") != std::string::npos)
		{
			variant = 1;
		}
		if (blueprintName.find("_3") != std::string::npos)
		{
			variant = 2;
		}
		
		int type = GetShipIdType(blueprintName); // TODO: This might be able to be changed like the Linux version to properly returning a std::pair and then maybe this whole thing could also just be a hook?
		
		return std::pair<int, int>(type, variant);
	}
}};
