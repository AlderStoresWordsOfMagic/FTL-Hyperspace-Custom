/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'FTLGameStripped'
*/

struct CompleteShip;
struct ProjectileFactory;
struct SpaceManager;
struct Projectile;
struct WeaponAnimation;
struct Repairable;
struct Room;
struct CrewMember;
struct ShipManager;
struct ArmamentBox;
struct CommandGui;
struct EquipmentBox;
struct AugmentEquipBox;
struct CombatControl;
struct Pointf;
struct Animation;
struct WarningMessage;
struct StarMap;
struct Location;
struct CrewBlueprint;
struct WorldManager;
struct OxygenSystem;
struct ShipSystem;
struct TeleportSystem;
struct ChoiceText;
struct Targetable;
struct LocationEvent__Choice;
struct LocationEvent;
struct ShipBlueprint;
struct WindowFrame;
struct WarningWithLines;
struct std__pair_13float___float;
struct std__vector_4Fire;
struct WeaponMount;
struct std__vector_4bool;
struct Ship__DoorState;
struct std__vector_8GL_Color;
struct std__vector_16AnimationTracker;
struct ResourceControl__DynamicImageInfo;
struct StarMap__NebulaInfo;
struct Sector;
struct VTable_AnimationTracker;
struct VTable_EquipmentBox;
struct std__pair_26std__string___RandomAmount;
struct std__pair_17std__string___int;

/* 1 */
struct Globals
{
};

/* 533 */
struct std__unordered_map_26std__string___GL_TextureZ1
{
  char unk[28];
};

/* 534 */
struct std__unordered_map_25int___freetype__font_data
{
  char unk[28];
};

/* 535 */
struct std__unordered_map_24GL_TextureZ1___ImageDesc
{
  char unk[28];
};

/* 452 */
struct std__pair_9int___int
{
  int _first;
  int _second;
};

/* 441 */
struct std__string
{
  char *string;
  int length;
  char unk[16];
};

/* 442 */
struct std__vector_11std__string
{
  std__string *_start;
  std__string *_finish;
  std__string *_end;
};

/* 538 */
struct std__vector_33ResourceControl__DynamicImageInfo
{
  ResourceControl__DynamicImageInfo *_start;
  ResourceControl__DynamicImageInfo *_finish;
  ResourceControl__DynamicImageInfo *_end;
};

/* 540 */
struct std__unordered_map_45std__string___ResourceControl__LogicalTexInfo
{
  char unk[28];
};

/* 542 */
struct ResourceManager;

/* 541 */
struct PackageModuleInfo;

/* 434 */
struct GL_Texture;

/* 438 */
struct GL_FrameBuffer;

/* 2 */
struct ResourceControl
{
  std__unordered_map_26std__string___GL_TextureZ1 images;
  std__unordered_map_25int___freetype__font_data fonts;
  std__unordered_map_24GL_TextureZ1___ImageDesc imageData;
  std__pair_9int___int preLoadProgress;
  std__string nextImageLoaded;
  int imageSwappingMode;
  std__vector_11std__string playerShipImages;
  std__vector_11std__string hangarShipImages;
  std__vector_11std__string enemyShipImages;
  std__vector_33ResourceControl__DynamicImageInfo dynamicImages;
  int dynamicLoadMark;
  std__unordered_map_45std__string___ResourceControl__LogicalTexInfo atlasData;
  ResourceManager *resmgr;
  PackageModuleInfo *package;
  GL_Texture *loading_box;
  GL_Texture *loading_bar;
  int screenWidth;
  int screenHeight;
  int renderPointX;
  int renderPointY;
  GL_FrameBuffer *frameBuffer;
  int fbViewportX;
  int fbViewportY;
  int fbViewportW;
  int fbViewportH;
};

/* 537 */
struct ResourceControl__DynamicImageInfo
{
  std__string name;
  int resid;
};

/* 3 */
struct PowerProfile
{
};

/* 178 */
struct ShipObject
{
  void *vptr;
  int iShipId;
};

/* 465 */
struct std__vector_6RoomZ1
{
  Room **_start;
  Room **_finish;
  Room **_end;
};

/* 179 */
struct Door;

/* 464 */
struct std__vector_6DoorZ1
{
  Door **_start;
  Door **_finish;
  Door **_end;
};

/* 294 */
struct OuterHull;

/* 466 */
struct std__vector_11OuterHullZ1
{
  OuterHull **_start;
  OuterHull **_finish;
  OuterHull **_end;
};

/* 453 */
struct std__vector_11WeaponMount
{
  WeaponMount *_start;
  WeaponMount *_finish;
  WeaponMount *_end;
};

/* 467 */
struct ImageDesc
{
  GL_Texture *tex;
  int resId;
  int w;
  int h;
  int x;
  int y;
  int rot;
};

/* 435 */
struct GL_Primitive;

/* 257 */
struct Point
{
  int x;
  int y;
};

/* 472 */
struct std__vector_15Ship__DoorState
{
  Ship__DoorState *_start;
  Ship__DoorState *_finish;
  Ship__DoorState *_end;
};

/* 265 */
struct AnimationTracker
{
  VTable_AnimationTracker *_vtable;
  float time;
  bool loop;
  float current_time;
  bool running;
  bool reverse;
  bool done;
  float loopDelay;
  float currentDelay;
};

/* 439 */
struct std__vector_9Animation
{
  Animation *_start;
  Animation *_finish;
  Animation *_end;
};

/* 440 */
struct std__vector_10GL_Texture
{
  GL_Texture *_start;
  GL_Texture *_finish;
  GL_Texture *_end;
};

/* 447 */
struct std__vector_5float
{
  float *_start;
  float *_finish;
  float *_end;
};

/* 444 */
struct std__vector_25std_pair_float_float
{
  std__pair_13float___float *_start;
  std__pair_13float___float *_finish;
  void *unk;
};

/* 445 */
struct std__vector_6Pointf
{
  Pointf *_start;
  Pointf *_finish;
  Pointf *_end;
};

/* 446 */
struct std__vector_15WeaponAnimation
{
  WeaponAnimation *_start;
  WeaponAnimation *_finish;
  WeaponAnimation *_end;
};

/* 191 */
struct ExplosionAnimation
{
  AnimationTracker _base;
  ShipObject shipObj;
  std__vector_9Animation explosions;
  std__vector_10GL_Texture pieces;
  std__vector_11std__string pieceNames;
  std__vector_5float rotationSpeed;
  std__vector_5float rotation;
  std__vector_25std_pair_float_float rotationSpeedMinMax;
  std__vector_6Pointf movementVector;
  std__vector_6Pointf position;
  std__vector_6Pointf startingPosition;
  float explosionTimer;
  float soundTimer;
  bool bFinalBoom;
  bool bJumpOut;
  std__vector_15WeaponAnimation weaponAnims;
  Point pos;
};

/* 469 */
struct Globals__Ellipse
{
  Point center;
  float a;
  float b;
};

/* 470 */
struct AnimationDescriptor
{
  int numFrames;
  int imageWidth;
  int imageHeight;
  int stripStartY;
  int stripStartX;
  int frameWidth;
  int frameHeight;
};

/* 258 */
struct Pointf
{
  float x;
  float y;
};

/* 471 */
struct std__vector_6voidZ1
{
  void **_start;
  void **_finish;
  void **_end;
};

/* 266 */
struct Animation
{
  GL_Texture *animationStrip;
  AnimationDescriptor info;
  AnimationTracker tracker;
  Pointf position;
  std__string soundForward;
  std__string soundReverse;
  bool randomizeFrames;
  float fScale;
  float fYStretch;
  int currentFrame;
  bool bAlwaysMirror;
  std__vector_6voidZ1 soundQueue;
  float fadeOut;
  float startFadeOut;
  std__string animName;
  int mask_x_pos;
  int mask_x_size;
  int mask_y_pos;
  int mask_y_size;
  GL_Primitive *primitive;
  GL_Primitive *mirroredPrimitive;
};

/* 189 */
struct LockdownShard;

/* 473 */
struct std__vector_13LockdownShard
{
  LockdownShard *_start;
  LockdownShard *_finish;
  LockdownShard *_end;
};

/* 6 */
struct Ship
{
  ShipObject _base;
  std__vector_6RoomZ1 vRoomList;
  std__vector_6DoorZ1 vDoorList;
  std__vector_11OuterHullZ1 vOuterWalls;
  std__vector_11OuterHullZ1 vOuterAirlocks;
  std__pair_9int___int hullIntegrity;
  std__vector_11WeaponMount weaponMounts;
  std__string floorImageName;
  ImageDesc shipFloor;
  GL_Primitive *floorPrimitive;
  std__string shipImageName;
  ImageDesc shipImage;
  Point glowOffset;
  GL_Primitive *shipImagePrimitive;
  std__string cloakImageName;
  ImageDesc shipImageCloak;
  GL_Primitive *cloakPrimitive;
  GL_Primitive *gridPrimitive;
  GL_Primitive *wallsPrimitive;
  GL_Primitive *doorsPrimitive;
  std__vector_15Ship__DoorState doorState;
  bool lastDoorControlMode;
  GL_Texture *thrustersImage;
  GL_Texture *jumpGlare;
  int vertical_shift;
  int horizontal_shift;
  std__string shipName;
  ExplosionAnimation explosion;
  bool bDestroyed;
  Globals__Ellipse baseEllipse;
  Animation engineAnim[2];
  AnimationTracker cloakingTracker;
  bool bCloaked;
  bool bExperiment;
  bool bShowEngines;
  std__vector_13LockdownShard lockdowns;
};

/* 303 */
struct Selectable
{
  void *vptr;
  int selectedState;
};

/* 460 */
struct Globals__Rect
{
  int x;
  int y;
  int w;
  int h;
};

/* 499 */
struct std__vector_3int
{
  int *_start;
  int *_finish;
  int *_end;
};

/* 523 */
struct std__vector_17std__vector_4bool
{
  std__vector_4bool *_start;
  std__vector_4bool *_finish;
  std__vector_4bool *_end;
};

/* 181 */
struct Room
{
  Selectable _base;
  ShipObject _shipObject;
  Globals__Rect rect;
  int iRoomId;
  bool bBlackedOut;
  std__vector_3int filledSlots;
  std__vector_17std__vector_4bool slots;
  bool bWarningLight;
  AnimationTracker lightTracker;
  int iFireCount;
  std__vector_9Animation fires;
  int primarySlot;
  int primaryDirection;
  float lastO2;
  GL_Primitive *floorPrimitive;
  GL_Primitive *blackoutPrimitive;
  GL_Primitive *highlightPrimitive;
  GL_Primitive *highlightPrimitive2;
  GL_Primitive *o2LowPrimitive;
  GL_Primitive *computerPrimitive;
  GL_Primitive *computerGlowPrimitive;
  GL_Primitive *computerGlowYellowPrimitive;
  GL_Primitive *lightPrimitive;
  GL_Primitive *lightGlowPrimitive;
  Animation stunSparks;
  Animation consoleSparks;
  bool bStunning;
  float fHacked;
  int currentSparkRotation;
  std__vector_9Animation sparks;
  float sparkTimer;
  int sparkCount;
  int iHackLevel;
  Animation roomTapped;
};

/* 454 */
struct WeaponMount
{
  Point position;
  bool mirror;
  bool rotate;
  int slide;
  int gib;
};

/* 468 */
struct Ship__DoorState
{
  int state;
  bool hacked;
  int level;
};

/* 618 */
struct VTable_AnimationTracker
{
  void (__thiscall *destroy)(AnimationTracker *this);
};

/* 443 */
struct std__pair_13float___float
{
  float _first;
  float _second;
};

/* 325 */
struct CachedPrimitive
{
  void *vptr;
  GL_Primitive *primitive;
};

/* 256 */
struct CachedImage
{
  CachedPrimitive _base;
  std__string imageName;
  GL_Texture *texture;
  int x;
  int y;
  float wScale;
  float hScale;
  float x_start;
  float y_start;
  float x_size;
  float y_size;
  float rotation;
  bool mirrored;
};

/* 173 */
struct WeaponAnimation
{
  Animation anim;
  bool bFireShot;
  bool bFiring;
  float fChargeLevel;
  int iChargedFrame;
  int iFireFrame;
  bool bMirrored;
  bool bRotation;
  Point fireLocation;
  bool bPowered;
  Point mountPoint;
  Point renderPoint;
  Point fireMountVector;
  AnimationTracker slideTracker;
  int slideDirection;
  CachedImage iChargeImage;
  Animation explosionAnim;
  WeaponMount mount;
  float fDelayChargeTime;
  Animation boostAnim;
  int boostLevel;
  bool bShowCharge;
  float fActualChargeLevel;
  int iChargeOffset;
  int iChargeLevels;
  int currentOffset;
  CachedImage chargeBox;
  CachedImage chargeBar;
  int iHackLevel;
  Animation hackSparks;
  bool playerShip;
};

/* 461 */
struct std__vector_4bool
{
  bool *_start;
  bool *_finish;
  bool *_end;
};

/* 252 */
struct CEvent
{
  void *vptr;
};

/* 250 */
struct GenericButton
{
  void *vptr;
  Point position;
  Globals__Rect hitbox;
  bool allowAnyTouch;
  bool touchSelectable;
  bool bRenderOff;
  bool bRenderSelected;
  bool bFlashing;
  AnimationTracker flashing;
  bool bActive;
  bool bHover;
  bool bActivated;
  bool bSelected;
  int activeTouch;
};

/* 388 */
struct Button
{
  GenericButton _base;
  GL_Texture *images[3];
  GL_Primitive *primitives[3];
  Point imageSize;
  bool bMirror;
};

/* 573 */
struct std__vector_8ButtonZ1
{
  Button **_start;
  Button **_finish;
  Button **_end;
};

/* 482 */
struct GL_Color
{
  float r;
  float g;
  float b;
  float a;
};

/* 423 */
struct TextString
{
  std__string data;
  bool isLiteral;
  char _PAD_1;
  char _PAD_2;
  char _PAD_3;
};

/* 251 */
struct TextButton
{
  GenericButton _base;
  GL_Primitive *primitives[3];
  GL_Texture *baseImage;
  Point baseImageOffset;
  GL_Primitive *basePrimitive;
  bool colorsSet;
  GL_Color colors[3];
  GL_Color textColor;
  Point buttonSize;
  int cornerInset;
  bool autoWidth;
  int autoWidthMargin;
  int autoWidthMin;
  bool autoRightAlign;
  TextString label;
  int font;
  int lineHeight;
  int textYOffset;
  bool autoShrink;
};

/* 561 */
struct std__vector_15GenericButtonZ1
{
  GenericButton **_start;
  GenericButton **_finish;
  GenericButton **_end;
};

/* 385 */
struct CrewCustomizeBox;

/* 562 */
struct std__vector_18CrewCustomizeBoxZ1
{
  CrewCustomizeBox **_start;
  CrewCustomizeBox **_finish;
  CrewCustomizeBox **_end;
};

/* 563 */
struct std__vector_14EquipmentBoxZ1
{
  EquipmentBox **_start;
  EquipmentBox **_finish;
  EquipmentBox **_end;
};

/* 329 */
struct SystemBlueprint;

/* 314 */
struct Description
{
  TextString title;
  TextString shortTitle;
  TextString description;
  int cost;
  int rarity;
  int baseRarity;
  int bp;
  bool locked;
  TextString tooltip;
  std__string tip;
};

/* 387 */
struct InfoBox
{
  Point location;
  const SystemBlueprint *blueprint;
  Description desc;
  int tempUpgrade;
  int powerLevel;
  int maxPower;
  int systemId;
  int systemWidth;
  int yShift;
  Point descBoxSize;
  const CrewBlueprint *pCrewBlueprint;
  std__string warning;
  bool bDetailed;
  std__string additionalTip;
  std__string additionalWarning;
  WindowFrame *primaryBox;
  int primaryBoxOffset;
  WindowFrame *secondaryBox;
  std__string droneBlueprint;
};

/* 205 */
struct SystemCustomBox;

/* 564 */
struct std__vector_17SystemCustomBoxZ1
{
  SystemCustomBox **_start;
  SystemCustomBox **_finish;
  SystemCustomBox **_end;
};

/* 548 */
struct std__vector_14GL_PrimitiveZ1
{
  GL_Primitive **_start;
  GL_Primitive **_finish;
  GL_Primitive **_end;
};

/* 407 */
struct ShipButton;

/* 568 */
struct std__vector_12ShipButtonZ1
{
  ShipButton **_start;
  ShipButton **_finish;
  ShipButton **_end;
};

/* 222 */
struct UnlockArrow;

/* 567 */
struct std__vector_11UnlockArrow
{
  UnlockArrow *_start;
  UnlockArrow *_finish;
  UnlockArrow *_end;
};

/* 241 */
struct FocusWindow
{
  void *vptr;
  bool bOpen;
  bool bFullFocus;
  Point close;
  bool bCloseButtonSelected;
  Point position;
};

/* 565 */
struct std__vector_10ChoiceText
{
  ChoiceText *_start;
  ChoiceText *_finish;
  ChoiceText *_end;
};

/* 566 */
struct std__vector_13Globals__Rect
{
  Globals__Rect *_start;
  Globals__Rect *_finish;
  Globals__Rect *_end;
};

/* 346 */
struct WeaponBlueprint;

/* 324 */
struct DroneBlueprint;

/* 330 */
struct AugmentBlueprint;

/* 339 */
struct Blueprint
{
  void *vptr;
  std__string name;
  Description desc;
  int type;
};

/* 518 */
struct std__vector_10TextString
{
  TextString *_start;
  TextString *_finish;
  TextString *_end;
};

/* 519 */
struct std__vector_16std_pair_int_int
{
  std__pair_9int___int *_start;
  std__pair_9int___int *_finish;
  void *unk;
};

/* 521 */
struct std__vector_21std__vector_8GL_Color
{
  std__vector_8GL_Color *_start;
  std__vector_8GL_Color *_finish;
  std__vector_8GL_Color *_end;
};

/* 279 */
struct CrewBlueprint
{
  Blueprint _base;
  TextString crewName;
  TextString crewNameLong;
  std__vector_10TextString powers;
  bool male;
  std__vector_16std_pair_int_int skillLevel;
  std__vector_21std__vector_8GL_Color colorLayers;
  std__vector_3int colorChoices;
};

/* 280 */
struct ResourceEvent
{
  int missiles;
  int fuel;
  int drones;
  int scrap;
  int crew;
  bool traitor;
  bool cloneable;
  TextString cloneText;
  std__string crewType;
  const WeaponBlueprint *weapon;
  const DroneBlueprint *drone;
  const AugmentBlueprint *augment;
  CrewBlueprint crewBlue;
  int systemId;
  int weaponCount;
  int droneCount;
  bool steal;
  bool intruders;
  int fleetDelay;
  int hullDamage;
  int upgradeAmount;
  int upgradeId;
  int upgradeSuccessFlag;
  std__string removeItem;
};

/* 211 */
struct ChoiceBox
{
  FocusWindow _base;
  GL_Texture *textBox;
  WindowFrame *box;
  std__string mainText;
  std__vector_10ChoiceText choices;
  unsigned int columnSize;
  std__vector_13Globals__Rect choiceBoxes;
  int potentialChoice;
  int selectedChoice;
  int fontSize;
  bool centered;
  int gap_size;
  float openTime;
  ResourceEvent rewards;
  GL_Color currentTextColor;
  Pointf lastChoice;
};

/* 223 */
struct ShipSelect
{
  Point position;
  Point titlePos;
  std__vector_14GL_PrimitiveZ1 shipListBase;
  std__vector_12ShipButtonZ1 shipButtons;
  std__vector_11UnlockArrow arrows;
  bool bOpen;
  int selectedShip;
  InfoBox infoBox;
  int currentType;
  TextButton typeA;
  TextButton typeB;
  TextButton typeC;
  TextButton confirm;
  bool bConfirmed;
  int activeTouch;
  ChoiceBox tutorial;
  int tutorialPage;
};

/* 270 */
struct TimerHelper
{
  int maxTime;
  int minTime;
  float currTime;
  float currGoal;
  bool loop;
  bool running;
};

/* 212 */
struct TextInput
{
  std__string prompt;
  std__vector_3int text;
  std__vector_3int oldText;
  int pos;
  int lastPos;
  bool bActive;
  int allowedChars;
  int maxChars;
  TimerHelper blinker;
};

/* 570 */
struct ShipAchievementInfo;

/* 569 */
struct std__vector_19ShipAchievementInfo
{
  ShipAchievementInfo *_start;
  ShipAchievementInfo *_finish;
  ShipAchievementInfo *_end;
};

/* 210 */
struct ShipBuilder
{
  ShipManager *currentShip;
  GL_Primitive *nameBoxPrimitive;
  GL_Primitive *enableAdvancedPrimitive;
  Button resetButton;
  Button clearButton;
  TextButton startButton;
  TextButton backButton;
  TextButton renameButton;
  Button leftButton;
  Button rightButton;
  TextButton listButton;
  TextButton showButton;
  TextButton easyButton;
  TextButton normalButton;
  TextButton hardButton;
  TextButton typeA;
  TextButton typeB;
  TextButton typeC;
  Point typeALoc;
  Point typeBLoc;
  Point typeCLoc;
  TextButton randomButton;
  TextButton advancedOffButton;
  TextButton advancedOnButton;
  std__vector_15GenericButtonZ1 buttons;
  std__vector_9Animation animations;
  std__vector_18CrewCustomizeBoxZ1 vCrewBoxes;
  bool bOpen;
  GL_Primitive *baseImage;
  GL_Primitive *shipSelectBox;
  GL_Primitive *shipAchBox;
  GL_Primitive *shipEquipBox;
  GL_Primitive *startButtonBox;
  GL_Primitive *advancedButtonBox;
  int typeAOffset;
  int typeBOffset;
  int typeCOffset;
  int shipAchPadding;
  int advancedTitleOffset;
  std__vector_14EquipmentBoxZ1 vEquipmentBoxes;
  InfoBox infoBox;
  std__vector_17SystemCustomBoxZ1 sysBoxes;
  int shoppingId;
  int currentSlot;
  int currentBox;
  bool bDone;
  const ShipBlueprint *ships[30];
  int currentShipId;
  int storeIds[4];
  bool bRenaming;
  std__string currentName;
  bool bShowRooms;
  bool bCustomizingCrew;
  Animation walkingMan;
  Pointf walkingManPos;
  ShipSelect shipSelect;
  ChoiceBox introScreen;
  bool bShowedIntro;
  int currentType;
  TextInput nameInput;
  int activeTouch;
  bool activeTouchIsShip;
  bool shipDragActive;
  bool shipDragVertical;
  Point shipDragOffset;
  std__vector_19ShipAchievementInfo shipAchievements;
  int selectedAch;
  GL_Texture *arrow;
  WindowFrame *descBox;
  AnimationTracker tracker;
  bool encourageShipList;
};

/* 247 */
struct SlideBar
{
  Globals__Rect box;
  bool hovering;
  bool holding;
  Globals__Rect marker;
  Point mouseStart;
  Point rectStart;
  std__pair_9int___int minMax;
};

/* 248 */
struct ControlButton;

/* 571 */
struct std__vector_13ControlButton
{
  ControlButton *_start;
  ControlButton *_finish;
  ControlButton *_end;
};

/* 386 */
struct ConfirmWindow
{
  FocusWindow _base;
  TextString text;
  int textHeight;
  int minWidth;
  int windowWidth;
  TextString yesText;
  TextString noText;
  bool autoCenter;
  GL_Texture *windowImage;
  GL_Primitive *window;
  TextButton yesButton;
  TextButton noButton;
  bool result;
};

/* 249 */
struct ControlsScreen
{
  std__vector_13ControlButton buttons[4];
  int selectedButton;
  TextButton defaultButton;
  ConfirmWindow resetDialog;
  Button pageButtons[4];
  int currentPage;
  WindowFrame *customBox;
};

/* 572 */
struct std__vector_12TextButtonZ1
{
  TextButton **_start;
  TextButton **_finish;
  TextButton **_end;
};

/* 532 */
struct LanguageChooser
{
  FocusWindow _base;
  std__vector_12TextButtonZ1 buttons;
  int iChoice;
};

/* 246 */
struct OptionsScreen
{
  ChoiceBox _base;
  Point position;
  Point wipeProfilePosition;
  SlideBar soundVolume;
  SlideBar musicVolume;
  bool bCustomizeControls;
  ControlsScreen controls;
  TextButton closeButton;
  TextButton wipeProfileButton;
  int choiceFullscreen;
  int choiceVSync;
  int choiceFrameLimit;
  int choiceLowend;
  int choiceColorblind;
  int choiceLanguage;
  int choiceDialogKeys;
  int choiceShowPaths;
  int choiceAchievementPopups;
  int choiceAutoPause;
  int choiceTouchAutoPause;
  int choiceControls;
  int lastFullScreen;
  bool isSoundTouch;
  bool isMusicTouch;
  LanguageChooser langChooser;
  bool showWipeButton;
  ConfirmWindow wipeProfileDialog;
  ChoiceBox restartRequiredDialog;
};

/* 243 */
struct CreditScreen
{
  float scroll;
  std__string shipName;
  std__string crewString;
  float pausing;
  GL_Texture *bg;
  std__vector_11std__string creditNames;
  int lastValidCredit;
  int touchesDown;
  double touchDownTime;
  float skipMessageTimer;
  char gap5C[3];
  char _unk;
};

/* 474 */
struct std__vector_12CrewMemberZ1
{
  CrewMember **_start;
  CrewMember **_finish;
  CrewMember **_end;
};

/* 531 */
struct MainMenu
{
  bool bOpen;
  int activeTouch;
  GL_Texture *background;
  GL_Texture *glowy;
  AnimationTracker glowTracker;
  Button continueButton;
  Button startButton;
  Button helpButton;
  Button statButton;
  Button optionsButton;
  Button creditsButton;
  Button quitButton;
  bool itbButtonActive;
  Button itbButton;
  Animation *itbAnim;
  std__vector_8ButtonZ1 buttons;
  int finalChoice;
  ShipBuilder shipBuilder;
  bool bScoreScreen;
  OptionsScreen optionScreen;
  bool bSelectSave;
  ConfirmWindow confirmNewGame;
  ChoiceBox changelog;
  bool bCreditScreen;
  char _unk[4];
  CreditScreen credits;
  bool bChangedLogin;
  std__vector_12CrewMemberZ1 testCrew;
  bool bChangedScreen;
  std__string error;
  char gap34A4[3];
  char _unk2;
};

/* 150 */
struct CApp
{
  CEvent _base;
  bool Running;
  bool shift_held;
  CommandGui *gui;
  WorldManager *world;
  MainMenu menu;
  LanguageChooser langChooser;
  int screen_x;
  int screen_y;
  int modifier_x;
  int modifier_y;
  bool fullScreenLastState;
  bool minimized;
  bool minLastState;
  bool focus;
  bool focusLastState;
  bool steamOverlay;
  bool steamOverlayLastState;
  bool rendering;
  bool gameLogic;
  float mouseModifier_x;
  float mouseModifier_y;
  GL_FrameBuffer *framebuffer;
  bool fboSupport;
  int x_bar;
  int y_bar;
  bool lCtrl;
  bool useFrameBuffer;
  bool manualResolutionError;
  int manualResErrorX;
  int manualResErrorY;
  bool nativeFullScreenError;
  bool fbStretchError;
  char __NULL[2];
  char lastLanguage[24];
  char inputFocus;
  char useDirect3D;
};

/* 267 */
struct DamageMessage;

/* 475 */
struct std__vector_15DamageMessageZ1
{
  DamageMessage **_start;
  DamageMessage **_finish;
  DamageMessage **_end;
};

/* 235 */
struct ShipStatus
{
  Point location;
  float size;
  ShipManager *ship;
  CombatControl *combat;
  GL_Primitive *hullBox;
  GL_Primitive *hullBox_Red;
  GL_Primitive *shieldBox_On;
  GL_Primitive *shieldBox_Off;
  GL_Primitive *shieldBox_Red;
  GL_Primitive *shieldCircleCharged[4];
  GL_Primitive *shieldCircleUncharged[4];
  GL_Primitive *shieldCircleHacked[4];
  GL_Primitive *shieldCircleHackedCharged[4];
  GL_Primitive *energyShieldBox;
  GL_Primitive *energyShieldBar[5];
  GL_Texture *hullLabel;
  GL_Texture *hullLabel_Red;
  GL_Primitive *shieldBoxPurple;
  GL_Primitive *oxygenPurple;
  GL_Primitive *evadePurple;
  GL_Primitive *evadeOxygenBox;
  GL_Primitive *evadeOxygenBox_topRed;
  GL_Primitive *evadeOxygenBox_bottomRed;
  GL_Primitive *evadeOxygenBox_bothRed;
  GL_Primitive *fuelIcon;
  GL_Primitive *missilesIcon;
  GL_Primitive *dronesIcon;
  GL_Primitive *scrapIcon;
  GL_Primitive *fuelIcon_red;
  GL_Primitive *missilesIcon_red;
  GL_Primitive *dronesIcon_red;
  GL_Primitive *scrapIcon_red;
  GL_Primitive *healthMask;
  GL_Texture *healthMaskTexture;
  int lastHealth;
  Globals__Ellipse baseShield;
  int currentHover;
  Point evadeOxygenBoxLocation;
  int lastFuel;
  int lastDrones;
  int lastScrap;
  int lastMissiles;
  int lastHull;
  WarningWithLines *hullMessage;
  WarningMessage *shieldMessage;
  WarningMessage *oxygenMessage;
  WarningMessage *boardingMessage;
  std__vector_15DamageMessageZ1 resourceMessages;
  AnimationTracker noMoneyTracker;
  AnimationTracker flashTracker;
  bool bBossFight;
  bool bEnemyShip;
  Point noShipShift;
  Point intruderShift;
  Point energyShieldPos;
  Point intruderPos;
};

/* 217 */
struct CrewBox;

/* 605 */
struct std__vector_9CrewBoxZ1
{
  CrewBox **_start;
  CrewBox **_finish;
  CrewBox **_end;
};

/* 213 */
struct CrewControl
{
  ShipManager *shipManager;
  std__vector_12CrewMemberZ1 selectedCrew;
  std__vector_12CrewMemberZ1 potentialSelectedCrew;
  Door *selectedDoor;
  Repairable *selectedRepair;
  Point selectedGrid;
  int selectedRoom;
  bool selectedPlayerShip;
  Point availablePosition;
  std__vector_9CrewBoxZ1 crewBoxes;
  Point firstMouse;
  Point currentMouse;
  Point worldFirstMouse;
  Point worldCurrentMouse;
  bool mouseDown;
  bool bUpdated;
  int activeTouch;
  char selectingCrew;
  char selectingCrewOnPlayerShip;
  double selectingCrewStartTime;
  bool doorControlMode;
  bool doorControlOpen;
  bool doorControlOpenSet;
  CombatControl *combatControl;
  unsigned int selectedCrewBox;
  AnimationTracker crewMessage;
  std__string message;
  Button saveStations;
  Button returnStations;
  GL_Primitive *saveStationsBase;
  GL_Primitive *returnStationsBase;
  int stationsLastY;
};

/* 202 */
struct SystemBox;

/* 549 */
struct std__vector_11SystemBoxZ1
{
  SystemBox **_start;
  SystemBox **_finish;
  SystemBox **_end;
};

/* 199 */
struct SystemControl
{
  ShipManager *shipManager;
  CombatControl *combatControl;
  std__vector_11SystemBoxZ1 sysBoxes;
  Globals__Rect SystemPower;
  bool bSystemPowerHover;
  Point position;
  Point systemPowerPosition;
  Point subSystemPosition;
  GL_Primitive *wiresImage;
  GL_Primitive *wiresMask;
  GL_Primitive *noButton;
  GL_Primitive *button;
  GL_Primitive *noButton_cap;
  GL_Primitive *button_cap;
  GL_Primitive *drone;
  GL_Primitive *drone3;
  GL_Primitive *drone2;
  GL_Primitive *sub_box;
  int sub_spacing;
  WarningMessage *notEnoughPower;
  AnimationTracker flashBatteryPower;
  AnimationTracker flashTracker;
};

/* 547 */
struct std__vector_13ArmamentBoxZ1
{
  ArmamentBox **_start;
  ArmamentBox **_finish;
  ArmamentBox **_end;
};

/* 242 */
struct ArmamentControl
{
  void *vptr;
  int systemId;
  CommandGui *gui;
  ShipManager *shipManager;
  std__vector_13ArmamentBoxZ1 boxes;
  Point location;
  Globals__Rect touchHitBox;
  GL_Texture *holderImage;
  GL_Primitive *holder;
  GL_Primitive *holderTab;
  std__vector_14GL_PrimitiveZ1 smallBoxHolder;
  std__vector_9Animation smallBoxHackAnim;
  int smallBoxHolderTop;
  bool bOpen;
  Point lastMouse;
  Point currentMouse;
  int draggingBox;
  int draggingTouch;
  bool bDragging;
  int iLastSwapSlot;
  bool bTutorialFlash;
  int iFlashSlot;
  int activeTouch;
};

/* 272 */
struct WarningMessage
{
  void *vptr;
  AnimationTracker tracker;
  Point position;
  bool isImage;
  TextString text;
  bool centerText;
  GL_Color textColor;
  bool useWarningLine;
  CachedImage image;
  std__string imageName;
  bool flash;
  std__string sound;
  AnimationTracker flashTracker;
};

/* 239 */
struct WeaponControl
{
  ArmamentControl _base;
  Targetable *currentTarget;
  ProjectileFactory *armedWeapon;
  bool autoFiring;
  TextButton autoFireButton;
  GL_Primitive *autoFireBase;
  GL_Primitive *targetIcon[4];
  GL_Primitive *targetIconYellow[4];
  Pointf autoFireFocus;
  WarningMessage missileMessage;
  WarningMessage systemMessage;
  int armedSlot;
};

/* 234 */
struct DroneControl
{
  ArmamentControl _base;
  WarningMessage droneMessage;
  WarningMessage noTargetMessage;
  WarningMessage systemMessage;
};

/* 550 */
struct std__vector_14CompleteShipZ1
{
  CompleteShip **_start;
  CompleteShip **_finish;
  CompleteShip **_end;
};

/* 160 */
struct SpaceDrone;

/* 155 */
struct HandAnimation
{
  GL_Texture *hand;
  Point start;
  Point finish;
  Pointf location;
  bool bRunning;
  float pause;
};

/* 244 */
struct CombatControl
{
  CommandGui *gui;
  ShipManager *shipManager;
  Point playerShipPosition;
  SpaceManager *space;
  WeaponControl weapControl;
  DroneControl droneControl;
  std__vector_11SystemBoxZ1 sysBoxes;
  std__vector_14CompleteShipZ1 enemyShips;
  CompleteShip *currentTarget;
  SpaceDrone *currentDrone;
  Point position;
  int selectedRoom;
  int selectedSelfRoom;
  Point targetPosition;
  Point boxPosition;
  WindowFrame *hostileBoxFrame;
  CachedImage healthMask;
  CachedImage shieldCircleCharged[5];
  CachedImage shieldCircleUncharged[5];
  CachedImage shieldCircleHacked[5];
  CachedImage shieldCircleHackedCharged[5];
  CachedImage shieldChargeBox;
  CachedImage superShieldBox5;
  CachedImage superShieldBox12;
  bool open;
  float shipIconSize;
  Pointf potentialAiming;
  std__vector_6Pointf aimingPoints;
  Pointf lastMouse;
  bool mouseDown;
  bool isAimingTouch;
  bool movingBeam;
  Point beamMoveLast;
  bool invalidBeamTouch;
  Point screenReposition;
  std__pair_9int___int teleportCommand;
  int iTeleportArmed;
  CachedImage teleportTarget_send;
  CachedImage teleportTarget_return;
  CachedImage hackTarget;
  CachedImage mindTarget;
  AnimationTracker ftl_timer;
  WarningMessage ftlWarning;
  AnimationTracker hacking_timer;
  std__vector_11std__string hackingMessages;
  bool boss_visual;
  bool bTeachingBeam;
  WindowFrame *tipBox;
  HandAnimation hand;
};

/* 606 */
struct TextButton0
{
  GenericButton _base;
  GL_Primitive *primitives[3];
  GL_Texture *baseImage;
  Point baseImageOffset;
  GL_Primitive *basePrimitive;
  bool colorsSet;
  char gap65[3];
  GL_Color colors[3];
  GL_Color textColor;
  Point buttonSize;
  int cornerInset;
  bool autoWidth;
  char gapB5[3];
  int autoWidthMargin;
  int autoWidthMin;
  bool autoRightAlign;
  char gapC1[3];
  TextString label;
  int font;
  int lineHeight;
  int textYOffset;
  char autoShrink;
  char ready;
};

/* 236 */
struct FTLButton
{
  TextButton0 _base;
  float ftl_blink;
  float ftl_blink_dx;
  float pullout;
  ShipManager *ship;
  GL_Primitive *baseImage;
  GL_Primitive *baseImageRed;
  GL_Primitive *pulloutBase;
  GL_Primitive *pulloutBaseRed;
  GL_Primitive *pilotOn;
  GL_Primitive *pilotOff1;
  GL_Primitive *pilotOff2;
  GL_Primitive *enginesOn;
  GL_Primitive *enginesOff1;
  GL_Primitive *enginesOff2;
  GL_Texture *FTL_loadingbars;
  GL_Texture *FTL_loadingbars_off;
  GL_Primitive *loadingBars;
  GL_Primitive *loadingBarsOff;
  int lastBarsWidth;
  WarningMessage *enginesDown;
  bool bOutOfFuel;
  bool bBossFight;
  bool bHoverRaw;
  bool bHoverPilot;
  bool bHoverEngine;
};

/* 383 */
struct SpaceStatus
{
  GL_Primitive *warningImages[10];
  WarningMessage *warningMessage;
  WarningMessage *incomingFire;
  Globals__Rect hitbox;
  Globals__Rect hitbox2;
  int currentEffect;
  int currentEffect2;
  SpaceManager *space;
  Point position;
  int touchedTooltip;
};

/* 607 */
struct std__vector_13FocusWindowZ1
{
  FocusWindow **_start;
  FocusWindow **_finish;
  FocusWindow **_end;
};

/* 216 */
struct MenuScreen
{
  FocusWindow _base;
  GL_Texture *mainImage;
  GL_Primitive *menuPrimitive;
  int menuWidth;
  std__vector_12TextButtonZ1 buttons;
  int command;
  std__vector_3int commands;
  Point position;
  ConfirmWindow confirmDialog;
  int tempCommand;
  GenericButton *saveQuit;
  bool bShowControls;
  Point statusPosition;
  GL_Texture *difficultyBox;
  int difficultyWidth;
  std__string difficultyLabel;
  std__string difficultyText;
  GL_Texture *dlcBox;
  int dlcWidth;
  std__string dlcLabel;
  std__string dlcText;
  GL_Texture *achBox;
  GL_Primitive *achBoxPrimitive;
  int achWidth;
  std__string achLabel;
  std__vector_19ShipAchievementInfo shipAchievements;
  int selectedAch;
  InfoBox info;
};

/* 201 */
struct GameOver
{
  FocusWindow _base;
  std__vector_12TextButtonZ1 buttons;
  GL_Primitive *box;
  int boxWidth;
  int command;
  std__vector_3int commands;
  bool bShowStats;
  Point position;
  std__string gameoverText;
  bool bVictory;
  float openedTimer;
  CreditScreen credits;
  bool bShowingCredits;
};

/* 233 */
struct InputBox
{
  FocusWindow _base;
  WindowFrame *textBox;
  std__string mainText;
  bool bDone;
  bool bInvertCaps;
  std__string inputText;
  std__vector_11std__string lastInputs;
  int lastInputIndex;
};

/* 218 */
struct TabbedWindow
{
  FocusWindow _base;
  std__vector_8ButtonZ1 buttons;
  std__vector_13FocusWindowZ1 windows;
  std__vector_11std__string names;
  unsigned int currentTab;
  int buttonType;
  TextButton doneButton;
  Point move;
  bool bBlockClose;
  bool bTutorialMode;
  bool bWindowLock;
};

/* 232 */
struct UpgradeBox;

/* 609 */
struct std__vector_12UpgradeBoxZ1
{
  UpgradeBox **_start;
  UpgradeBox **_finish;
  UpgradeBox **_end;
};

/* 411 */
struct ReactorButton
{
  Button _base;
  int tempUpgrade;
  ShipManager *ship;
  bool selected;
};

/* 231 */
struct Upgrades
{
  FocusWindow _base;
  GL_Texture *box;
  std__vector_12UpgradeBoxZ1 vUpgradeBoxes;
  ShipManager *shipManager;
  TextButton undoButton;
  ReactorButton reactorButton;
  InfoBox infoBox;
  Point infoBoxLoc;
  int systemCount;
  int forceSystemInfoWidth;
};

/* 208 */
struct DropBox
{
  Point position;
  bool isSellBox;
  GL_Texture *boxImage[2];
  int selectedImage;
  TextString titleText;
  TextString bodyText;
  int bodySpace;
  TextString lowerText;
  TextString sellText;
  std__string sellCostText;
  int textWidth;
  int insertHeight;
  int titleInsert;
};

/* 227 */
struct CrewEquipBox;

/* 610 */
struct std__vector_14CrewEquipBoxZ1
{
  CrewEquipBox **_start;
  CrewEquipBox **_finish;
  CrewEquipBox **_end;
};

/* 209 */
struct CrewManifest
{
  FocusWindow _base;
  GL_Primitive *box;
  DropBox overBox;
  ShipManager *shipManager;
  std__vector_14CrewEquipBoxZ1 crewBoxes;
  InfoBox infoBox;
  int confirmingDelete;
  ConfirmWindow deleteDialog;
};

/* 556 */
struct std__vector_19ProjectileFactoryZ1
{
  ProjectileFactory **_start;
  ProjectileFactory **_finish;
  ProjectileFactory **_end;
};

/* 225 */
struct Equipment
{
  FocusWindow _base;
  GL_Texture *box;
  GL_Texture *storeBox;
  DropBox overBox;
  DropBox overAugImage;
  DropBox sellBox;
  bool bSellingItem;
  ShipManager *shipManager;
  std__vector_14EquipmentBoxZ1 vEquipmentBoxes;
  std__vector_19ProjectileFactoryZ1 weaponsTrashList;
  EquipmentBox *overcapacityBox;
  AugmentEquipBox *overAugBox;
  int selectedEquipBox;
  int draggingEquipBox;
  int potentialDraggingBox;
  bool bDragging;
  Point firstMouse;
  Point currentMouse;
  Point dragBoxCenter;
  Point dragBoxOffset;
  InfoBox infoBox;
  std__string sellCostText;
  bool bOverCapacity;
  bool bOverAugCapacity;
  bool bStoreMode;
  int cargoId;
  Point infoBoxLoc;
};

/* 198 */
struct Store;

/* 594 */
struct std__vector_7StoreZ1
{
  Store **_start;
  Store **_finish;
  Store **_end;
};

/* 224 */
struct CommandGui
{
  ShipStatus shipStatus;
  CrewControl crewControl;
  SystemControl sysControl;
  CombatControl combatControl;
  FTLButton ftlButton;
  SpaceStatus spaceStatus;
  StarMap *starMap;
  CompleteShip *shipComplete;
  std__vector_13FocusWindowZ1 focusWindows;
  Point pauseTextLoc;
  GL_Primitive *pauseImage;
  GL_Primitive *pauseImage2;
  GL_Primitive *pauseImageAuto;
  GL_Primitive *pauseCrewImage;
  GL_Primitive *pauseDoorsImage;
  GL_Primitive *pauseHackingImage;
  GL_Primitive *pauseMindImage;
  GL_Primitive *pauseRoomImage;
  GL_Primitive *pauseTargetImage;
  GL_Primitive *pauseTargetBeamImage;
  GL_Primitive *pauseTeleportLeaveImage;
  GL_Primitive *pauseTeleportArriveImage;
  GL_Primitive *flareImage;
  Point shipPosition;
  std__string locationText;
  std__string loadEvent;
  int loadSector;
  ChoiceBox choiceBox;
  bool gameover;
  bool alreadyWon;
  bool outOfFuel;
  MenuScreen menuBox;
  GameOver gameOverScreen;
  OptionsScreen optionsBox;
  bool bPaused;
  bool bAutoPaused;
  bool menu_pause;
  bool event_pause;
  bool touch_pause;
  int touchPauseReason;
  InputBox inputBox;
  float fShakeTimer;
  TabbedWindow shipScreens;
  TabbedWindow storeScreens;
  Upgrades upgradeScreen;
  CrewManifest crewScreen;
  Equipment equipScreen;
  Location *newLocation;
  SpaceManager *space;
  Button upgradeButton;
  WarningMessage upgradeWarning;
  TextButton storeButton;
  Button optionsButton;
  const float pause_anim_time;
  float pause_animation;
  std__vector_7StoreZ1 storeTrash;
  TimerHelper flickerTimer;
  TimerHelper showTimer;
  bool bHideUI;
  CompleteShip *enemyShip;
  bool waitLocation;
  bool lastLocationWait;
  bool dangerLocation;
  std__vector_3int commandKey;
  bool jumpComplete;
  int mapId;
  ConfirmWindow leaveCrewDialog;
  bool secretSector;
  int activeTouch;
  bool activeTouchIsButton;
  bool activeTouchIsCrewBox;
  bool activeTouchIsShip;
  bool activeTouchIsNull;
  std__vector_3int extraTouches;
  bool bTutorialWasRunning;
  bool focusAteMouse;
  bool choiceBoxOpen;
  int systemDetailsWidth;
  ChoiceBox writeErrorDialog;
  bool suppressWriteError;
};

/* 151 */
struct BossShip;

/* 504 */
struct std__vector_12ProjectileZ1
{
  Projectile **_start;
  Projectile **_finish;
  Projectile **_end;
};

/* 391 */
struct RandomAmount
{
  int min;
  int max;
  float chanceNone;
};

/* 153 */
struct AsteroidGenerator
{
  char asteroidQueue[40];
  RandomAmount spawnRate[3];
  RandomAmount stateLength[3];
  int numberOfShips;
  int iState;
  int currentSpace;
  int iNextDirection;
  float fStateTimer;
  float timer;
  bool bRunning;
  int initShields;
};

/* 512 */
struct std__vector_13ShipManagerZ1
{
  ShipManager **_start;
  ShipManager **_finish;
  ShipManager **_end;
};

/* 503 */
struct std__vector_12SpaceDroneZ1
{
  SpaceDrone **_start;
  SpaceDrone **_finish;
  SpaceDrone **_end;
};

/* 513 */
struct SpaceManager__FleetShip
{
  GL_Texture *image;
  Point location;
};

/* 253 */
struct Scroller
{
  GL_Texture *imageId;
  int size_x;
  int size_y;
  int image_x;
  int image_y;
  float fSpeed;
  float current_x;
  bool bInitialized;
};

/* 158 */
struct NebulaCloud;

/* 514 */
struct std__vector_11NebulaCloud
{
  NebulaCloud *_start;
  NebulaCloud *_finish;
  NebulaCloud *_end;
};

/* 157 */
struct SpaceManager
{
  std__vector_12ProjectileZ1 projectiles;
  AsteroidGenerator asteroidGenerator;
  std__vector_13ShipManagerZ1 ships;
  std__vector_12SpaceDroneZ1 drones;
  bool dangerZone;
  GL_Texture *currentBack;
  ImageDesc currentPlanet;
  CachedImage planetImage;
  ImageDesc fleetShip;
  GL_Texture *shipIds[8];
  SpaceManager__FleetShip fleetShips[9];
  Scroller asteroidScroller[3];
  GL_Texture *sunImage;
  GL_Texture *sunGlow;
  AnimationTracker sunGlow1;
  AnimationTracker sunGlow2;
  AnimationTracker sunGlow3;
  bool sunLevel;
  bool pulsarLevel;
  GL_Texture *pulsarFront;
  GL_Texture *pulsarBack;
  GL_Texture *lowendPulsar;
  bool bPDS;
  int envTarget;
  Point shipPosition;
  float randomPDSTimer;
  std__vector_12ProjectileZ1 pdsQueue;
  TimerHelper flashTimer;
  AnimationTracker flashTracker;
  ImageDesc currentBeacon;
  ImageDesc currentBeaconFlash;
  AnimationTracker beaconTracker;
  bool flashSound;
  bool bNebula;
  bool bStorm;
  std__vector_11NebulaCloud nebulaClouds;
  GL_Texture *lowendNebula;
  GL_Texture *lowendStorm;
  GL_Texture *lowendSun;
  GL_Texture *lowendAsteroids;
  float shipHealth;
  bool gamePaused;
  TimerHelper pdsFireTimer;
  int pdsCountdown;
  std__vector_9Animation pdsSmokeAnims;
  bool queueScreenShake;
  bool playerShipInFront;
};

/* 515 */
struct std__vector_10LocationZ1
{
  Location **_start;
  Location **_finish;
  Location **_end;
};

/* 588 */
struct std__map_18Point___LocationZ1
{
  char unk[24];
};

/* 413 */
struct DistressButton
{
  TextButton _base;
  TextString labels[2];
  bool state;
};

/* 405 */
struct WindowFrame
{
  Globals__Rect rect;
  GL_Primitive *outline;
  GL_Primitive *mask;
  GL_Primitive *pattern;
};

/* 598 */
struct std__vector_9ImageDesc
{
  ImageDesc *_start;
  ImageDesc *_finish;
  ImageDesc *_end;
};

/* 590 */
struct std__vector_19StarMap__NebulaInfo
{
  StarMap__NebulaInfo *_start;
  StarMap__NebulaInfo *_finish;
  StarMap__NebulaInfo *_end;
};

/* 591 */
struct std__vector_8SectorZ1
{
  Sector **_start;
  Sector **_finish;
  Sector **_end;
};

/* 277 */
struct Location
{
  Pointf loc;
  std__vector_10LocationZ1 connectedLocations;
  bool beacon;
  bool known;
  int visited;
  bool dangerZone;
  bool newSector;
  bool nebula;
  bool boss;
  LocationEvent *event;
  ImageDesc planet;
  ImageDesc space;
  ImageDesc beaconImage;
  GL_Texture *imageId;
  bool questLoc;
  AnimationTracker flashTracker;
  bool fleetChanging;
  std__string planetImage;
  std__string spaceImage;
};

/* 593 */
struct std__map_17std__string___int
{
  char unk[24];
};

/* 596 */
struct std__vector_23std_pair_std_string_int
{
  std__pair_17std__string___int *_start;
  std__pair_17std__string___int *_finish;
  std__pair_17std__string___int *_end;
};

/* 599 */
struct std__map_17LocationZ1___bool
{
  char unk[24];
};

/* 276 */
struct StarMap
{
  FocusWindow _base;
  float visual_size;
  std__vector_10LocationZ1 locations;
  std__map_18Point___LocationZ1 locations_grid;
  std__vector_10LocationZ1 temp_path;
  Location *currentLoc;
  Location *potentialLoc;
  Location *hoverLoc;
  Point position;
  int iPopulatedTiles;
  int iLocationCount;
  int iEmptyTiles;
  bool bInitializedDisplay;
  Pointf translation;
  bool readyToTravel;
  Point dangerZone;
  float dangerZoneRadius;
  float shipRotation[2];
  TextButton endButton;
  TextButton waitButton;
  DistressButton distressButton;
  TextButton jumpButton;
  int worldLevel;
  bool bMapRevealed;
  int pursuitDelay;
  int sectorNameFont;
  WindowFrame mapBorder;
  GL_Primitive *mapBorderTitle;
  GL_Primitive *mapBorderTitleMask;
  GL_Texture *mapBorderSector;
  GL_Texture *mapInsetTextLeft;
  GL_Texture *mapInsetTextMiddle;
  GL_Texture *mapInsetTextRight;
  GL_Texture *mapInsetTextJump;
  GL_Texture *mapInsetWaitDistress;
  GL_Primitive *redLight;
  GL_Primitive *fuelMessage;
  GL_Primitive *waitingMessage;
  GL_Primitive *unexplored;
  GL_Primitive *explored;
  GL_Primitive *danger;
  GL_Primitive *warning;
  GL_Primitive *yellow_warning;
  GL_Primitive *warning_circle;
  GL_Primitive *nebula_circle;
  GL_Texture *boxGreen[3];
  GL_Texture *boxPurple[3];
  GL_Texture *boxWhite[3];
  GL_Primitive *ship;
  GL_Primitive *shipNoFuel;
  GL_Primitive *bossShip;
  GL_Primitive *dangerZoneEdge;
  GL_Texture *dangerZoneTile;
  GL_Primitive *dangerZoneAdvance;
  GL_Primitive *targetBox;
  GL_Primitive *sectorTargetBox_green;
  GL_Primitive *sectorTargetBox_yellow;
  AnimationTracker targetBoxTimer;
  TextButton closeButton;
  WindowFrame *descBox;
  GL_Primitive *shadow;
  GL_Primitive *warning_shadow;
  GL_Primitive *fuelOverlay;
  GL_Primitive *dangerFlash;
  GL_Primitive *mapsBottom[3];
  GL_Texture *dottedLine;
  GL_Texture *cross;
  GL_Texture *boss_jumps_box;
  std__vector_9ImageDesc smallNebula;
  std__vector_9ImageDesc largeNebula;
  std__vector_19StarMap__NebulaInfo currentNebulas;
  ShipManager *shipManager;
  bool outOfFuel;
  AnimationTracker waiting;
  int dangerWaitStart;
  AnimationTracker distressAnim;
  bool bTutorialGenerated;
  std__vector_11std__string delayedQuests;
  std__vector_8SectorZ1 sectors;
  Sector *currentSector;
  Sector *secretSector;
  bool bChoosingNewSector;
  bool bSecretSector;
  Location dummyNewSector;
  int mapsAnalyzed;
  int locationsCreated;
  int shipsCreated;
  std__map_17std__string___int scrapCollected;
  std__map_17std__string___int dronesCollected;
  std__map_17std__string___int fuelCollected;
  std__map_17std__string___int weaponFound;
  std__map_17std__string___int droneFound;
  int bossLoc;
  int arrivedAtBase;
  bool reversedPath;
  bool bossJumping;
  std__vector_10LocationZ1 boss_path;
  bool bossLevel;
  bool boss_wait;
  Pointf bossPosition;
  std__string forceSectorChoice;
  bool bEnemyShip;
  bool bNebulaMap;
  bool bInfiniteMode;
  std__vector_8SectorZ1 lastSectors;
  TextButton closeSectorButton;
  int sectorMapSeed;
  int currentSectorSeed;
  int fuelEventSeed;
  std__string lastEscapeEvent;
  bool waitedLast;
  std__vector_7StoreZ1 storeTrash;
  std__vector_23std_pair_std_string_int addedQuests;
  int bossStage;
  TextString bossMessage;
  WarningMessage *bossJumpingWarning;
  bool crystalAlienFound;
  std__map_17LocationZ1___bool foundMap;
  Point sectorMapOffset;
  int potentialSectorChoice;
  int finalSectorChoice;
  std__vector_13Globals__Rect sectorHitBoxes;
};

/* 498 */
struct std__map_35int___ShipBlueprint__SystemTemplate
{
  char unk[24];
};

/* 500 */
struct std__vector_13CrewBlueprint
{
  CrewBlueprint *_start;
  CrewBlueprint *_finish;
  CrewBlueprint *_end;
};

/* 395 */
struct ShipBlueprint
{
  Blueprint _base;
  Description desc;
  std__string blueprintName;
  TextString name;
  TextString shipClass;
  std__string layoutFile;
  std__string imgFile;
  std__string cloakFile;
  std__string shieldFile;
  std__string floorFile;
  std__map_35int___ShipBlueprint__SystemTemplate systemInfo;
  std__vector_3int systems;
  int droneCount;
  int originalDroneCount;
  int droneSlots;
  std__string loadDrones;
  std__vector_11std__string drones;
  std__vector_11std__string augments;
  int weaponCount;
  int originalWeaponCount;
  int weaponSlots;
  std__string loadWeapons;
  std__vector_11std__string weapons;
  int missiles;
  int drone_count;
  int health;
  int originalCrewCount;
  std__vector_11std__string defaultCrew;
  std__vector_13CrewBlueprint customCrew;
  int maxPower;
  int boardingAI;
  int bp_count;
  int maxCrew;
  int maxSector;
  int minSector;
  TextString unlock;
};

/* 604 */
struct CrewDesc;

/* 603 */
struct std__vector_8CrewDesc
{
  CrewDesc *_start;
  CrewDesc *_finish;
  CrewDesc *_end;
};

/* 396 */
struct ShipEvent
{
  bool present;
  std__string name;
  std__string blueprint;
  std__string auto_blueprint;
  std__vector_11std__string blueprintList;
  ShipBlueprint actualBlueprint;
  bool hostile;
  std__string surrender;
  std__string escape;
  std__string destroyed;
  std__string deadCrew;
  std__string gotaway;
  int escapeTimer;
  RandomAmount surrenderThreshold;
  RandomAmount escapeThreshold;
  std__vector_8CrewDesc crewOverride;
  std__vector_11std__string weaponOverride;
  int weaponOverCount;
  std__vector_11std__string droneOverride;
  int droneOverCount;
  int shipSeed;
};

/* 420 */
struct StatusEffect;

/* 600 */
struct std__vector_12StatusEffect
{
  StatusEffect *_start;
  StatusEffect *_finish;
  StatusEffect *_end;
};

/* 602 */
struct std__vector_21LocationEvent__Choice
{
  LocationEvent__Choice *_start;
  LocationEvent__Choice *_finish;
  LocationEvent__Choice *_end;
};

/* 281 */
struct WorldManager
{
  CompleteShip *playerShip;
  BossShip *bossShip;
  SpaceManager space;
  int currentDifficulty;
  std__vector_14CompleteShipZ1 ships;
  StarMap starMap;
  CommandGui *commandGui;
  LocationEvent *baseLocationEvent;
  LocationEvent *lastLocationEvent;
  ShipEvent currentShipEvent;
  std__vector_12StatusEffect currentEffects;
  std__string startingText;
  Location *newLocation;
  bool bStartedGame;
  bool bLoadingGame;
  bool vAutoSaved;
  bool bExtraChoice;
  std__vector_3int choiceHistory;
  std__string generatedEvent;
  TextString lastMainText;
  int playerCrewCount;
  int killedCrew;
  int playerHull;
  std__vector_3int blueRaceChoices;
  int lastSelectedCrewSeed;
  bool testingBlueprints;
  std__vector_21LocationEvent__Choice originalChoiceList;
};

/* 305 */
struct Targetable
{
  void *vptr;
  int type;
  bool hostile;
  bool targeted;
};

/* 313 */
struct Collideable
{
  void *vptr;
};

/* 455 */
struct std__vector_10ShipSystem
{
  ShipSystem *_start;
  ShipSystem *_finish;
  ShipSystem *_end;
};

/* 287 */
struct CloakingSystem;

/* 286 */
struct BatterySystem;

/* 288 */
struct MindSystem;

/* 296 */
struct CloneSystem;

/* 285 */
struct HackingSystem;

/* 289 */
struct Shields;

/* 291 */
struct WeaponSystem;

/* 292 */
struct DroneSystem;

/* 295 */
struct EngineSystem;

/* 409 */
struct MedbaySystem;

/* 290 */
struct ArtillerySystem;

/* 496 */
struct std__vector_15ArtillerySystem
{
  ArtillerySystem *_start;
  ArtillerySystem *_finish;
  ArtillerySystem *_end;
};

/* 507 */
struct std__vector_17std__vector_4Fire
{
  std__vector_4Fire *_start;
  std__vector_4Fire *_finish;
  std__vector_4Fire *_end;
};

/* 432 */
struct Spreader_Fire
{
  ShipObject _base;
  int count;
  std__vector_3int roomCount;
  std__vector_17std__vector_4Fire grid;
};

/* 501 */
struct std__vector_16std__vector_3int
{
  std__vector_3int *_start;
  std__vector_3int *_finish;
  std__vector_3int *_end;
};

/* 174 */
struct Drone;

/* 502 */
struct std__vector_7DroneZ1
{
  Drone **_start;
  Drone **_finish;
  Drone **_end;
};

/* 505 */
struct std__map_9int___int
{
  char unk[24];
};

/* 390 */
struct ParticleEmitter;

/* 506 */
struct std__vector_17ParticleEmitterZ1
{
  ParticleEmitter **_start;
  ParticleEmitter **_finish;
  ParticleEmitter **_end;
};

/* 193 */
struct ShipManager
{
  ShipObject _base;
  Targetable _targetable;
  Collideable _collideable;
  std__vector_10ShipSystem vSystemList;
  OxygenSystem *oxygenSystem;
  TeleportSystem *teleportSystem;
  CloakingSystem *cloakSystem;
  BatterySystem *batterySystem;
  MindSystem *mindSystem;
  CloneSystem *cloneSystem;
  HackingSystem *hackingSystem;
  bool showNetwork;
  bool addedSystem;
  unsigned __int8 gap_ex_1[2];
  Shields *shieldSystem;
  WeaponSystem *weaponSystem;
  DroneSystem *droneSystem;
  EngineSystem *engineSystem;
  MedbaySystem *medbaySystem;
  std__vector_15ArtillerySystem artillerySystems;
  std__vector_12CrewMemberZ1 vCrewList;
  Spreader_Fire fireSpreader;
  Ship ship;
  char statusMessages[40];
  bool bGameOver;
  ShipManager *current_target;
  std__pair_13float___float jump_timer;
  int fuel_count;
  bool hostile_ship;
  bool bDestroyed;
  int iLastDamage;
  AnimationTracker jumpAnimation;
  std__vector_15DamageMessageZ1 damMessages;
  std__vector_3int systemKey;
  int currentScrap;
  bool bJumping;
  bool bAutomated;
  unsigned __int8 gap_ex_2[2];
  int shipLevel;
  ShipBlueprint myBlueprint;
  bool lastEngineStatus;
  bool lastJumpReady;
  bool bContainsPlayerCrew;
  int iIntruderCount;
  std__vector_16std__vector_3int crewCounts;
  int tempDroneCount;
  int tempMissileCount;
  std__vector_9Animation explosions;
  std__vector_4bool tempVision;
  unsigned __int8 unk1[8];
  bool bHighlightCrew;
  std__vector_7DroneZ1 droneTrash;
  std__vector_12SpaceDroneZ1 spaceDrones;
  std__vector_12SpaceDroneZ1 newDroneArrivals;
  int bpCount;
  int iCustomizeMode;
  bool bShowRoom;
  std__vector_12ProjectileZ1 superBarrage;
  bool bInvincible;
  std__vector_12SpaceDroneZ1 superDrones;
  GL_Primitive *highlight;
  int failedDodgeCounter;
  std__vector_5float hitByBeam;
  bool enemyDamagedUncloaked;
  int damageCloaked;
  std__map_9int___int killedByBeam;
  int minBeaconHealth;
  std__vector_17ParticleEmitterZ1 fireExtinguishers;
  bool bWasSafe;
};

/* 481 */
struct EquipmentBoxItem
{
  ProjectileFactory *pWeapon;
  Drone *pDrone;
  CrewMember *pCrew;
  const AugmentBlueprint *augment;
};

/* 226 */
struct EquipmentBox
{
  VTable_EquipmentBox *_vtable;
  GL_Primitive *blocked_overlay;
  GL_Color overlayColor;
  std__string imageName;
  GL_Primitive *empty;
  GL_Primitive *full;
  GL_Primitive *selected_empty;
  GL_Primitive *selected_full;
  WeaponSystem *weaponSys;
  DroneSystem *droneSys;
  Point location;
  Globals__Rect hitBox;
  EquipmentBoxItem item;
  bool bMouseHovering;
  bool bGlow;
  bool bBlocked;
  int slot;
  bool bLocked;
  int value;
  bool bPermanentLock;
  bool blockDetailed;
};

/* 300 */
struct ChoiceText
{
  int type;
  std__string text;
  ResourceEvent rewards;
};

/* 520 */
struct std__vector_8GL_Color
{
  GL_Color *_start;
  GL_Color *_finish;
  GL_Color *_end;
};

/* 301 */
struct CrewTarget
{
  ShipObject _base;
};

/* 382 */
struct Path
{
  Point start;
  std__vector_6DoorZ1 doors;
  Point finish;
  float distance;
};

/* 516 */
struct Slot
{
  int roomId;
  int slotId;
  Point worldLocation;
};

/* 185 */
struct CrewAnimation;

/* 259 */
struct CachedRect
{
  CachedPrimitive _base;
  int x;
  int y;
  int w;
  int h;
};

/* 187 */
struct BoardingGoal
{
  float fHealthLimit;
  int causedDamage;
  int targetsDestroyed;
  int target;
  int damageType;
};

/* 517 */
struct CrewTask
{
  int taskId;
  int room;
  int _sil__DO_NOT_USE_system;
};

/* 522 */
struct SCrewStats
{
  std__vector_3int stat;
  std__string species;
  std__string name;
  bool male;
};

/* 525 */
struct std__vector_30std__vector_16AnimationTracker
{
  std__vector_16AnimationTracker *_start;
  std__vector_16AnimationTracker *_finish;
  std__vector_16AnimationTracker *_end;
};

/* 183 */
struct CrewMember
{
  CrewTarget _base;
  float x;
  float y;
  float size;
  float scale;
  float goal_x;
  float goal_y;
  int width;
  int height;
  std__pair_13float___float health;
  float speed_x;
  float speed_y;
  Path path;
  bool new_path;
  float x_destination;
  float y_destination;
  Door *last_door;
  Repairable *currentRepair;
  bool bSuffocating;
  int moveGoal;
  int selectionState;
  int iRoomId;
  int iManningId;
  int iRepairId;
  int iStackId;
  Slot currentSlot;
  bool intruder;
  bool bFighting;
  bool bSharedSpot;
  CrewAnimation *crewAnim;
  GL_Texture *selectionImage;
  CachedImage healthBox;
  CachedImage healthBoxRed;
  CachedRect healthBar;
  float fMedbay;
  float lastDamageTimer;
  float lastHealthChange;
  int currentShipId;
  AnimationTracker flashHealthTracker;
  Pointf currentTarget;
  CrewTarget *crewTarget;
  BoardingGoal boardingGoal;
  bool bFrozen;
  bool bFrozenLocation;
  CrewTask task;
  std__string type;
  ShipManager *ship;
  Slot finalGoal;
  Door *blockingDoor;
  bool bOutOfGame;
  std__string species;
  bool bDead;
  unsigned __int8 gap_ex_1[2];
  int iOnFire;
  bool bActiveManning;
  ShipSystem *currentSystem;
  int usingSkill;
  CrewBlueprint blueprint;
  Animation healing;
  Animation stunned;
  AnimationTracker levelUp;
  int lastLevelUp;
  SCrewStats stats;
  std__vector_17std__vector_4bool skillsEarned;
  bool clone_ready;
  bool bMindControlled;
  int iDeathNumber;
  Animation mindControlled;
  Animation stunIcon;
  std__vector_30std__vector_16AnimationTracker skillUp;
  int healthBoost;
  float fMindDamageBoost;
  float fCloneDying;
  bool bResisted;
  unsigned __int8 gap_ex_2[2];
  Slot savedPosition;
  float fStunTime;
  CachedImage movementTarget;
  bool bCloned;
};

/* 416 */
struct WarningWithLines
{
  WarningMessage _base;
  GL_Primitive *linePrimitive;
  Point textOrigin;
  TextString topText;
  TextString bottomText;
  int topTextLimit;
  int bottomTextLimit;
};

/* 180 */
struct Repairable
{
  Selectable _base;
  ShipObject shipObj;
  float fDamage;
  Point pLoc;
  float fMaxDamage;
  std__string name;
  int roomId;
  int iRepairCount;
};

/* 238 */
struct TouchTooltip;

/* 215 */
struct ArmamentBox
{
  void *vptr;
  std__vector_14GL_PrimitiveZ1 background;
  GL_Primitive *emptyBackground;
  GL_Primitive *hoverHighlight;
  GL_Primitive *outline;
  GL_Primitive *emptyOutline;
  GL_Primitive *powerBarGlow[4];
  GL_Primitive *iconBackground;
  GL_Primitive *iconInsetBackground;
  GL_Primitive *icon;
  GL_Primitive *iconDoubleSize;
  std__string iconName;
  std__string iconBackgroundName;
  Point lastIconPos;
  Point location;
  int xOffset;
  Point largeIconOffset;
  Point nameOffset;
  int nameWidth;
  bool mouseHover;
  bool touchHover;
  bool touchHighlight;
  bool selected;
  int hotKey;
  int activeTouch;
  TouchTooltip *touchTooltip;
  Animation hackAnimation;
  GL_Primitive *touchButtonBorder;
  Globals__Rect touchButtonBorderRect;
  float touchButtonSlidePos;
  std__vector_15GenericButtonZ1 touchButtons;
  Globals__Rect touchButtonHitbox;
  GL_Color iconColor;
  bool droneVariation;
  bool bIoned;
};

/* 154 */
struct ProjectileFactory
{
  ShipObject _base;
  std__pair_13float___float cooldown;
  std__pair_13float___float subCooldown;
  float baseCooldown;
  const WeaponBlueprint *blueprint;
  Point localPosition;
  Animation flight_animation;
  bool autoFiring;
  bool fireWhenReady;
  bool powered;
  int requiredPower;
  std__vector_6Pointf targets;
  std__vector_6Pointf lastTargets;
  int targetId;
  int iAmmo;
  std__string name;
  int numShots;
  float currentFiringAngle;
  float currentEntryAngle;
  Targetable *currentShipTarget;
  CloakingSystem *cloakingSystem;
  WeaponAnimation weaponVisual;
  WeaponMount mount;
  std__vector_12ProjectileZ1 queuedProjectiles;
  int iBonusPower;
  bool bFiredOnce;
  int iSpendMissile;
  float cooldownModifier;
  int shotsFiredAtTarget;
  int radius;
  int boostLevel;
  int lastProjectileId;
  int chargeLevel;
  int iHackLevel;
  int goalChargeLevel;
  bool isArtillery;
};

/* 554 */
struct std__vector_12RepairableZ1
{
  Repairable **_start;
  Repairable **_finish;
  Repairable **_end;
};

/* 555 */
struct std__vector_8CrewTask
{
  CrewTask *_start;
  CrewTask *_finish;
  CrewTask *_end;
};

/* 283 */
struct CrewAI
{
  ShipManager *ship;
  bool bAIon;
  bool bAirlockRequested;
  bool bMedbayRequested;
  bool bHurtCrew;
  bool bCalmShip;
  std__vector_12CrewMemberZ1 crewList;
  std__vector_12CrewMemberZ1 intruderList;
  std__vector_12RepairableZ1 hullBreaches;
  std__vector_8CrewTask desiredTaskList;
  std__vector_8CrewTask bonusTaskList;
  std__vector_4bool breachedRooms;
  char unk[8];
  int iTeleportRequest;
  bool bUrgentTeleport;
  int startingCrewCount;
  bool bMultiracialCrew;
  bool bOverrideRace;
};

/* 394 */
struct CombatAI
{
  ShipManager *target;
  std__vector_19ProjectileFactoryZ1 weapons;
  std__vector_12SpaceDroneZ1 drones;
  int stance;
  std__vector_3int system_targets;
  bool bFiringWhileCloaked;
  ShipManager *self;
};

/* 553 */
struct std__map_26std__string___PowerProfile
{
  char unk[24];
};

/* 282 */
struct ShipAI
{
  ShipManager *ship;
  ShipManager *target;
  CrewAI crewAI;
  CombatAI combatAI;
  bool playerShip;
  bool surrendered;
  bool escaping;
  bool destroyed;
  int surrenderThreshold;
  int escapeThreshold;
  float escapeTimer;
  int lastMaxPower;
  std__map_26std__string___PowerProfile powerProfiles;
  int boardingProfile;
  int iTeleportRequest;
  int iTeleportTarget;
  int brokenSystems;
  int boardingAi;
  int iCrewNeeded;
  bool bStalemateTrigger;
  float fStalemateTimer;
  int lastHealth;
  bool bBoss;
  int iTimesTeleported;
};

/* 152 */
struct CompleteShip
{
  void *vptr;
  int iShipId;
  ShipManager *shipManager;
  SpaceManager *spaceManager;
  CompleteShip *enemyShip;
  bool bPlayerShip;
  ShipAI shipAI;
  std__vector_12CrewMemberZ1 arrivingParty;
  std__vector_12CrewMemberZ1 leavingParty;
  int teleTargetRoom;
};

/* 228 */
struct AugmentEquipBox
{
  EquipmentBox _base;
  ShipManager *ship;
};

/* 627 */
struct Damage
{
  int iDamage;
  int iShieldPiercing;
  int fireChance;
  int breachChance;
  int stunChance;
  int iIonDamage;
  int iSystemDamage;
  int iPersDamage;
  bool bHullBuster;
  int ownerId;
  int selfId;
  bool bLockdown;
  bool crystalShard;
  bool bFriendlyFire;
  int iStun;
};

/* 171 */
struct Projectile
{
  Collideable _base;
  Targetable _targetable;
  Pointf position;
  Pointf last_position;
  float speed_magnitude;
  Pointf target;
  float heading;
  int ownerId;
  unsigned int selfId;
  Damage damage;
  float lifespan;
  int destinationSpace;
  int currentSpace;
  int targetId;
  bool dead;
  Animation death_animation;
  Animation flight_animation;
  Pointf speed;
  bool missed;
  bool hitTarget;
  std__string hitSolidSound;
  std__string hitShieldSound;
  std__string missSound;
  float entryAngle;
  bool startedDeath;
  bool passedTarget;
  bool bBroadcastTarget;
  AnimationTracker flashTracker;
  GL_Color color;
};

/* 589 */
struct StarMap__NebulaInfo
{
  GL_Primitive *primitive;
  int x;
  int y;
  int w;
  int h;
};

/* 612 */
struct std__vector_32std_pair_std_string_RandomAmount
{
  std__pair_26std__string___RandomAmount *_start;
  std__pair_26std__string___RandomAmount *_finish;
  std__pair_26std__string___RandomAmount *_end;
};

/* 333 */
struct SectorDescription
{
  std__vector_32std_pair_std_string_RandomAmount eventCounts;
  std__vector_23std_pair_std_string_int rarities;
  bool unique;
  std__vector_10TextString names;
  std__vector_10TextString shortNames;
  std__vector_11std__string musicTracks;
  std__string type;
  TextString name;
  TextString shortName;
  int minSector;
  bool used;
  std__string firstEvent;
};

/* 592 */
struct Sector
{
  int type;
  bool visited;
  bool reachable;
  std__vector_8SectorZ1 neighbors;
  Point location;
  int level;
  SectorDescription description;
};

/* 393 */
struct LocationEvent
{
};

/* 623 */
struct std__pair_17std__string___int
{
  std__string _first;
  int _second;
};

/* 601 */
struct ChoiceReq
{
  std__string object;
  int min_level;
  int max_level;
  int max_group;
  bool blue;
};

/* 321 */
struct LocationEvent__Choice
{
  LocationEvent *event;
  TextString text;
  ChoiceReq requirement;
  bool hiddenReward;
};

/* 264 */
struct CachedRectOutline
{
  CachedPrimitive _base;
  int x;
  int y;
  int w;
  int h;
  int thickness;
};

/* 293 */
struct ShipSystem
{
  Repairable _base;
  int iSystemType;
  bool bNeedsManned;
  bool bManned;
  int iActiveManned;
  bool bBoostable;
  std__pair_9int___int powerState;
  int iRequiredPower;
  GL_Texture *imageIcon;
  GL_Primitive *iconPrimitive;
  GL_Primitive *iconBorderPrimitive;
  GL_Primitive *iconPrimitives[20];
  CachedRect partialDamageRect;
  CachedRectOutline lockOutline;
  Globals__Rect roomShape;
  bool bOnFire;
  bool bBreached;
  std__pair_9int___int healthState;
  float fDamageOverTime;
  float fRepairOverTime;
  bool damagedLastFrame;
  bool repairedLastFrame;
  int originalPower;
  bool bNeedsPower;
  int iTempPowerCap;
  int iTempPowerLoss;
  int iTempDividePower;
  int iLockCount;
  TimerHelper lockTimer;
  bool bExploded;
  bool bOccupied;
  bool bFriendlies;
  std__string interiorImageName;
  GL_Primitive *interiorImage;
  GL_Primitive *interiorImageOn;
  GL_Primitive *interiorImageManned;
  GL_Primitive *interiorImageMannedFancy;
  int lastUserPower;
  int iBonusPower;
  int iLastBonusPower;
  Pointf location;
  int bpCost;
  AnimationTracker flashTracker;
  int maxLevel;
  int iBatteryPower;
  int iHackEffect;
  bool bUnderAttack;
  bool bLevelBoostable;
  bool bTriggerIon;
  std__vector_9Animation damagingEffects;
  int computerLevel;
};

/* 284 */
struct OxygenSystem
{
  ShipSystem _base;
  float max_oxygen;
  std__vector_5float oxygenLevels;
  float fTotalOxygen;
  bool bLeakingO2;
};

/* 298 */
struct TeleportSystem
{
  ShipSystem _base;
  float chargeLevel;
  bool bCanSend;
  bool bCanReceive;
  int iArmed;
  std__vector_4bool crewSlots;
  char unk[8];
  int iPreparedCrew;
  int iNumSlots;
  bool bSuperShields;
};

/* 192 */
struct Fire;

/* 448 */
struct std__vector_4Fire
{
  Fire *_start;
  Fire *_finish;
  Fire *_end;
};

/* 620 */
struct VTable_EquipmentBox
{
  void (__thiscall *destroy)(EquipmentBox *this);
  void (__thiscall *destructor)(EquipmentBox *this);
  void (__thiscall *SetPosition)(EquipmentBox *this, Point pos);
  void (__thiscall *OnRender)(EquipmentBox *this, bool unk);
  void (__thiscall *RenderLabels)(EquipmentBox *this, bool unk);
  void (__thiscall *RenderIcon)(EquipmentBox *this);
  void (__thiscall *SetShipManager)(EquipmentBox *this, ShipManager *ship);
  void (__thiscall *MouseMove)(EquipmentBox *this, int x, int y);
  void (__thiscall *OnTouch)(EquipmentBox *this);
  void (__thiscall *UpdateBoxImage)(EquipmentBox *this, bool unk);
  void (__thiscall *Restart)(EquipmentBox *this);
  void (__thiscall *AddItem)(EquipmentBox *this, EquipmentBoxItem item);
  void (__thiscall *Restart1)(EquipmentBox *this);
  char (__thiscall *CanHoldWeapon)(EquipmentBox *this);
  char (__thiscall *CanHoldDrone)(EquipmentBox *this);
  char (__thiscall *CanHoldAugment)(EquipmentBox *this);
  void (__thiscall *CheckContents)(EquipmentBox *this);
  int (__thiscall *GetType)(EquipmentBox *this, bool unk);
  char (__thiscall *IsCargoBox)(EquipmentBox *this);
  char (__thiscall *CanHoldCrew)(EquipmentBox *this);
  char (__thiscall *CanDoJob)(EquipmentBox *this);
};

/* 524 */
struct std__vector_16AnimationTracker
{
  AnimationTracker *_start;
  AnimationTracker *_finish;
  AnimationTracker *_end;
};

/* 622 */
struct std__pair_26std__string___RandomAmount
{
  std__string _first;
  RandomAmount _second;
};

/* 156 */
struct TutorialManager;

/* 159 */
struct ShipRepairDrone;

/* 161 */
struct CombatDrone;

/* 162 */
struct BoarderPodDrone;

/* 163 */
struct SuperShieldDrone;

/* 164 */
struct DefenseDrone;

/* 165 */
struct AchievementTracker;

/* 166 */
struct IonDrone;

/* 167 */
struct CrewDrone;

/* 168 */
struct ScoreKeeper;

/* 169 */
struct HackingDrone;

/* 170 */
struct PDSFire;

/* 172 */
struct CrewLaser;

/* 175 */
struct ShipGraph
{
  std__vector_6RoomZ1 rooms;
  std__vector_6DoorZ1 doors;
  std__vector_3int doorCounts;
  Point center;
  Pointf worldPosition;
  float worldHeading;
  Pointf lastWorldPosition;
  float lastWorldHeading;
  Globals__Rect shipBox;
  std__string shipName;
};

/* 176 */
struct CrewMemberFactory;

/* 177 */
struct ShipInfo
{
  std__map_17std__string___int augList;
  std__map_17std__string___int equipList;
  int augCount;
};

/* 182 */
struct Moddable;

/* 184 */
struct AnaerobicAlien;

/* 186 */
struct EnergyAlien;

/* 188 */
struct Algae;

/* 194 */
struct DebugHelper;

/* 195 */
struct CloneBox;

/* 196 */
struct BatteryBox;

/* 197 */
struct MindBox;

/* 203 */
struct CooldownSystemBox;

/* 204 */
struct ArtilleryBox;

/* 206 */
struct WeaponSystemBox;

/* 207 */
struct MouseControl;

/* 617 */
struct std__vector_11CachedImage
{
  CachedImage *_start;
  CachedImage *_finish;
  CachedImage *_end;
};

/* 214 */
struct WeaponBox
{
  ArmamentBox _base;
  ProjectileFactory *pWeapon;
  bool armed;
  bool armedForAutofire;
  float cooldownMax;
  float cooldownModifier;
  Point cooldownPoint;
  int cooldownWidth;
  int cooldownHeight;
  std__vector_14GL_PrimitiveZ1 cooldownBox;
  GL_Primitive *cooldownBar;
  std__vector_11CachedImage chargeIcons;
  bool defaultAutofire;
  bool wasCharged;
};

/* 219 */
struct SystemStoreBox;

/* 220 */
struct CrewStoreBox;

/* 221 */
struct StoreBox;

/* 229 */
struct DroneEquipBox;

/* 230 */
struct WeaponEquipBox;

/* 237 */
struct ShipRepair;

/* 240 */
struct DroneBox;

/* 254 */
struct freetype;

/* 255 */
struct Settings;

/* 260 */
struct FileHelper;

/* 261 */
struct CSurface;

/* 262 */
struct CFPS
{
  float RunningTime;
  char _unk[4];
  double OldTime;
  double LastTime;
  float SpeedFactor;
  int NumFrames;
  int Frames;
  int speedLevel;
};

/* 263 */
struct EventSystem;

/* 271 */
struct SoundControl;

/* 273 */
struct EventGenerator;

/* 274 */
struct EventTemplate;

/* 629 */
struct std__unordered_map_29std__string___EventTemplateZ1
{
  char unk[28];
};

/* 630 */
struct std__vector_15EventTemplateZ1
{
  EventTemplate **_start;
  EventTemplate **_finish;
  EventTemplate **_end;
};

/* 631 */
struct std__unordered_map_23std__string___ShipEvent
{
  char unk[28];
};

/* 275 */
struct EventsParser
{
  std__unordered_map_29std__string___EventTemplateZ1 eventTemplates;
  std__vector_15EventTemplateZ1 trashList;
  std__unordered_map_23std__string___ShipEvent shipTemplates;
};

/* 278 */
struct BlueprintManager;

/* 297 */
struct PowerManager;

/* 299 */
struct BeamWeapon;

/* 302 */
struct LaserBlast
{
  Projectile _base;
  Targetable *movingTarget;
  float spinAngle;
  float spinSpeed;
};

/* 304 */
struct Spreadable;

/* 311 */
struct BattleDrone;

/* 312 */
struct CloakingBox;

/* 315 */
struct MantisAlien;

/* 316 */
struct RepairDrone;

/* 317 */
struct TeleportBox;

/* 318 */
struct BoarderDrone;

/* 319 */
struct CrystalAlien;

/* 320 */
struct ItemBlueprint;

/* 322 */
struct RockAnimation;

/* 323 */
struct BombProjectile;

/* 326 */
struct EnergyAnimation;

/* 327 */
struct MantisAnimation;

/* 328 */
struct RepairAnimation;

/* 331 */
struct IonDroneAnimation;

/* 332 */
struct ResourcesTemplate;

/* 334 */
struct Ghost;

/* 335 */
struct DoorBox;

/* 336 */
struct HackBox;

/* 337 */
struct Missile;

/* 338 */
struct Asteroid;

/* 340 */
struct EngiAlien;

/* 341 */
struct RockAlien;

/* 342 */
struct SlugAlien;

/* 384 */
struct RepairStoreBox;

/* 389 */
struct SettingValues;

/* 392 */
struct TextLibrary;

/* 400 */
struct DroneStoreBox;

/* 401 */
struct WeaponStoreBox;

/* 403 */
struct TapBoxFrame;

/* 404 */
struct ToggleButton;

/* 406 */
struct freetype::font_data;

/* 408 */
struct ItemStoreBox;

/* 410 */
struct EngiAnimation;

/* 412 */
struct SlugAnimation;

/* 414 */
struct AugmentStoreBox;

/* 415 */
struct CrystalAnimation;

/* 417 */
struct AnaerobicAnimation;

/* 418 */
struct CAchievement;

/* 419 */
struct BoardingEvent;

/* 421 */
struct ShipGenerator;

/* 449 */
struct std__vector_4Room
{
  Room *_start;
  Room *_finish;
  Room *_end;
};

/* 450 */
struct std__vector_4Door
{
  Door *_start;
  Door *_finish;
  Door *_end;
};

/* 451 */
struct std__vector_9OuterHull
{
  OuterHull *_start;
  OuterHull *_finish;
  OuterHull *_end;
};

/* 463 */
struct std__vector_10CrewMember
{
  CrewMember *_start;
  CrewMember *_finish;
  CrewMember *_end;
};

/* 497 */
struct ShipBlueprint__SystemTemplate
{
  int systemId;
  int powerLevel;
  std__vector_3int location;
  int bp;
  int maxPower;
  std__string image;
  int slot;
  int direction;
  std__vector_11std__string weapon;
};

/* 539 */
struct ResourceControl__LogicalTexInfo
{
  std__string physName;
  int x;
  int y;
  int w;
  int h;
};

/* 597 */
struct std__pair_17LocationZ1___bool
{
  Location *_first;
  bool _second;
};

/* 608 */
struct std__vector_10TextButton
{
  TextButton *_start;
  TextButton *_finish;
  TextButton *_end;
};

/* 619 */
struct VTable_CompleteShip
{
  void (__thiscall *destroy)(CompleteShip *, int);
};

/* 621 */
struct std__pair_25std_string___RandomAmount;

/* 628 */
struct EventsParser__MinMaxChance
{
  int min;
  int max;
  float chance;
};

