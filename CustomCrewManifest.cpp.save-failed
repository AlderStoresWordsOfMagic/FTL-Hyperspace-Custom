#include "CustomCrewManifest.h"
#include "CustomShips.h"
#include "freetype.h"
#include <algorithm>
#include <boost/lexical_cast.hpp>

CustomCrewManifest CustomCrewManifest::instance = CustomCrewManifest();

void CustomCrewManifest::OnInit(CrewManifest *manifest, ShipManager *ship)
{
    crewManifest = manifest;

    std::string buttonImg("upgradeUI/Equipment/button_crew_arrow");
    leftButton = new Button();
    leftButton->OnInit(buttonImg, 850, 139);

    rightButton = new Button();
    rightButton->OnInit(buttonImg, 885, 139);

    rightButton->bMirror = true;


    int crewLimit = 8;

    auto custom = CustomShipSelect::GetInstance();
    if (custom->HasCustomDef(ship->myBlueprint.blueprintName))
    {
        crewLimit = custom->GetDefinition(ship->myBlueprint.blueprintName).crewLimit;
    }

    crewEquipBoxes.clear();

    int boxX = crewManifest->position.x + 75;
    int boxY = crewManifest->position.y - 45;

    for (int i = 0; i < crewLimit + 1; i++)
    {
        if (i % 8 == 0)
        {
            boxX = crewManifest->position.x + 75;
            boxY = crewManifest->position.y - 45;
            crewEquipBoxes.push_back(std::vector<CrewEquipBox*>());
        }

        if (i % 3 == 0)
        {
            boxX = crewManifest->position.x + 75;
            boxY += 133;
        }

        CrewEquipBox* box = new CrewEquipBox(Point(boxX, boxY), ship, i);

        crewEquipBoxes[std::floor(i / 8)].push_back(box);

        boxX += 170;
    }

    overCrewBox = new CrewEquipBox(Point(0, 0), ship, crewLimit + 1);
}

void CustomCrewManifest::OnRender()
{
    CSurface::GL_PushMatrix();
    if (crewManifest->confirmingDelete >= 0)
    {
        CSurface::GL_SetColorTint(0.25f, 0.25f, 0.25f, 1.0f);
    }

    CSurface::GL_Translate(crewManifest->position.x, crewManifest->position.y);
    CSurface::GL_RenderPrimitive(crewManifest->box);

    TextLibrary* lib = G_->GetTextLibrary();
    freetype::easy_print(10, 25.f, 55.f, lib->GetText("rename_note"));

    if (!overCrewBox->IsEmpty())
    {
        crewManifest->overBox.OnRender();
    }

    CSurface::GL_PopMatrix();
    CSurface::GL_PushMatrix();

    int slot = 0;

    for (CrewEquipBox* i : GetPage(currentPage))
    {
        if (!i->IsEmpty())
        {
            if (crewManifest->confirmingDelete == slot)
            {
                CSurface::GL_RemoveColorTint();
            }
        }

        if (slot == 6)
        {
            CSurface::GL_Translate(86.f, 0, 0);
        }

        i->OnRender(false);
        i->RenderLabels(false, i == overCrewBox);

        if (i->GetConfirmDelete())
        {
            crewManifest->confirmingDelete = slot;

            auto text = TextString();
            text.data = "confirm_dismiss";
            text.isLiteral = false;

            auto noText = TextString();
            noText.data = "";
            noText.isLiteral = false;

            crewManifest->deleteDialog.SetText(text, 300, false, noText, noText);
            crewManifest->deleteDialog.SetPosition(Point(i->location.x - 53, i->location.y + 86));
            crewManifest->deleteDialog.Open();
        }

        if (crewManifest->confirmingDelete == slot)
        {
            CSurface::GL_SetColorTint(0.25f, 0.25f, 0.25f, 1.f);
        }
        slot++;
    }
    CSurface::GL_PopMatrix();

    crewManifest->infoBox.OnRender();
}

void CustomCrewManifest::Update()
{
    std::vector<CrewMember*> crewList = std::vector<CrewMember*>();

    G_->GetCrewFactory()->GetCrewList(&crewList, 0, false);

    int slot = 0;

    for (auto i : crewEquipBoxes)
    {
        for (auto box : i)
        {
            box->Restart();

            if (slot < crewList.size())
            {
                EquipmentBoxItem item = EquipmentBoxItem();
                item.pCrew = crewList[slot];

                box->AddItem(item);
                box->bDead = false;
            }

            slot++;
        }
    }
}

HOOK_METHOD(ShipManager, IsCrewFull, () -> bool)
{
    if (iShipId == 1) return false;

    auto custom = CustomShipSelect::GetInstance();
    int crewCount = G_->GetCrewFactory()->GetCrewCount(iShipId);
    int crewLimit = 8;

    if (custom->HasCustomDef(myBlueprint.blueprintName))
    {
        crewLimit = custom->GetDefinition(myBlueprint.blueprintName).crewLimit;
    }

    if (crewLimit > crewCount)
    {
        return bAutomated;
    }
    return true;
}

HOOK_METHOD(ShipManager, IsCrewOverFull, () -> bool)
{
    if (iShipId == 1) return false;

    auto custom = CustomShipSelect::GetInstance();
    int crewCount = G_->GetCrewFactory()->GetCrewCount(iShipId);
    int crewLimit = 8;

    if (custom->HasCustomDef(myBlueprint.blueprintName))
    {
        crewLimit = custom->GetDefinition(myBlueprint.blueprintName).crewLimit;
    }

    return crewLimit < crewCount;
}

HOOK_METHOD(CrewManifest, constructor, () -> void)
{
    super();
}

HOOK_METHOD(CrewManifest, OnInit, (ShipManager *ship) -> void)
{
    CustomCrewManifest::GetInstance()->OnInit(this, ship);

    super(ship);
}

HOOK_METHOD(CrewManifest, OnRender, () -> void)
{
    //super();

    CustomCrewManifest::GetInstance()->OnRender();
}

HOOK_METHOD(CrewManifest, Update, () -> void)
{
    CustomCrewManifest::GetInstance()->Update();
}
